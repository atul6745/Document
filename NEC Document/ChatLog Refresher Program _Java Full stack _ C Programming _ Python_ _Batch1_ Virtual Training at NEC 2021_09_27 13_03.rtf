{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fcharset0 Segoe UI;}}
{\colortbl ;\red0\green0\blue0;\red255\green255\blue255;\red59\green182\blue60;}
\viewkind4\uc1\pard\cf1\b\f0\fs24 Chat Log   C:\\Users\\acer\\Documents\\ChatLog Refresher Program _Java Full stack _ C Programming _ Python_ _Batch1_ Virtual Training at NEC 2021_09_27 13_03.rtf\b0\par
\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 10:45: Back\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 10:45: back\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 10:45: back\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 10:45: Back\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 10:45: back\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 10:45: back\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 10:45: back\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 10:45: back\cf2\par
\cf3\b MAYANK KUMAR (to Everyone)\b0 : \cf1 10:45: back\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 10:45: back\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 10:45: back\cf2\par
\cf3\b abhishek rana (to Everyone)\b0 : \cf1 10:45: back\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 10:45: back\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 10:46: back\cf2\par
\cf3\b Mohit Rai (to Everyone)\b0 : \cf1 10:46: back\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 10:46: back\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 10:46: back\cf2\par
\cf3\b Harshit Mimani (to Everyone)\b0 : \cf1 10:46: back\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 10:46: back\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 10:46: Back\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 10:47: yes\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 10:47: yes \cf2\par
\cf3\b abhishek rana (to Everyone)\b0 : \cf1 10:47: yes\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 10:47: yes\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 10:47: yes\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 10:47: yes\cf2\par
\cf3\b Harshit Mimani (to Everyone)\b0 : \cf1 10:47: yes\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 10:47: yes\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 10:47: yes\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 10:47: Yes\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 10:47: Yes\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 10:47: collectio in python...yes\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 10:47: yes\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 10:47: yes\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 10:47: yes\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 10:47: ds in c ,java\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:52: java.util.Collection\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:52: java.util.Collections\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:54: Adding objects to the collection: add(E), addAll(Collection)\par
Testing size and membership: size(), isEmpty(), contains(E), containsAll(Collection)\par
Iterating over members: iterator()\par
Removing members: remove(E), removeAll(Collection), clear(), retainAll(Collection)\par
Generating array representations: toArray(), toArray(T[])\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:54: Collection interfaces : Collection, List, Set, Map, etc.\par
General-purpose implementations : ArrayList, LinkedList, HashSet, HashMap, etc.\par
Special-purpose implementations : designed for performance characteristics, usage restrictions, or behavior\par
Concurrent implementations: designed for use in high-concurrency contexts\par
Wrapper implementations: adding synchronization, immutability, etc.\par
Abstract implementations: building blocks for custom implementations\par
Algorithms : static methods that perform useful functions, such as sorting or randomizing a collection\par
Infrastructure: interfaces to support the collections\par
Array utilities : static methods that perform useful functions on arrays, such as sorting, initializing, or converting to collections\par
\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 11:07: ma'am what does sync, not sync means here??\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 11:09: ok ma'am\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:18: class Test<T> \{\par
    // An object of type T is declared\par
    T obj;\par
    Test(T obj) \{  this.obj = obj;  \}  // constructor\par
    public T getObject()  \{ return this.obj; \}\par
\}\par
  // Driver class to test above\par
class Main \{\par
    public static void main (String[] args)     \{\par
        // instance of Integer type\par
        Test <Integer> iObj = new Test<Integer>(15);\par
        System.out.println(iObj.getObject());\par
          // instance of String type\par
        Test <String> sObj =  new Test<String>("HelloJava");\par
        System.out.println(sObj.getObject());\par
    \}\par
\}\par
\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 11:19: 15\par
HelloJava\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 11:20: yes mam\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 11:20: 15\par
HelloJava\par
\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 11:20: 15\par
HelloJava\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 11:20: 15\par
HelloJava\par
\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 11:21: 15\par
HelloJava\par
\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 11:21: 15\par
HelloJava\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 11:21: 15\par
HelloJava\par
\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 11:21: 15\par
HelloJava\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 11:21: 15\par
HelloJava\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 11:21: 15\par
HelloJava\cf2\par
\cf3\b abhishek rana (to Everyone)\b0 : \cf1 11:21: 15\par
HelloJava\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 11:21: 15\par
HelloJava\cf2\par
\cf3\b Nagareddy Deepthi (to Everyone)\b0 : \cf1 11:21: 15\par
HelloJava\cf2\par
\cf3\b Harshit Mimani (to Everyone)\b0 : \cf1 11:21: 15\par
HelloJava\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 11:21: 15\par
HelloJava\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 11:22: why can we Only pass wrapper class in generic parameter not primitive datatype \cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 11:22: 15\par
HelloJava\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 11:22: 15\par
HelloJava\par
\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 11:22: 15\par
HelloJava\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 11:22: 15\par
HelloJava\cf2\par
\cf3\b Saloni Dhawan (to Everyone)\b0 : \cf1 11:22: 15\par
HelloJava\par
\cf2\par
\cf3\b Mohit Rai (to Everyone)\b0 : \cf1 11:23: 15\cf2\par
\cf3\b Mohit Rai (to Everyone)\b0 : \cf1 11:23: hellojava\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 11:23: ok mam\cf2\par
\cf3\b MAYANK KUMAR (to Everyone)\b0 : \cf1 11:23: 15\par
HelloJava\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:23: class Test<T, U> \{\par
    T obj1;  // An object of type T\par
    U obj2;  // An object of type U\par
     // constructor\par
    Test(T obj1, U obj2)     \{\par
        this.obj1 = obj1;\par
        this.obj2 = obj2;\par
    \}\par
     // To print objects of T and U\par
    public void print()     \{\par
        System.out.println(obj1);\par
        System.out.println(obj2);\par
    \}\par
\}\par
 // Driver class to test above\par
class Main \{\par
    public static void main (String[] args)     \{\par
        Test <String, Integer> obj = new Test<String, Integer>("Java", 15);\par
         obj.print();\par
    \}\par
\}\par
\par
\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 11:23: 15\par
HelloJava\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 11:24: Java\par
15\par
\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 11:24: Java\par
15\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 11:24: Java\par
15\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:24: class Test<T> \{\par
    // An object of type T is declared\par
    T obj;\par
    Test(T obj) \{  this.obj = obj;  \}  // constructor\par
    public T getObject()  \{ return this.obj; \}\par
\}\par
  // Driver class to test above\par
public class Main \{\par
    public static void main (String[] args)     \{\par
        // instance of Integer type\par
        Test <Integer> iObj = new Test<Integer>(15);\par
        System.out.println(iObj.getObject());\par
          // instance of String type\par
        Test <String> sObj =  new Test<String>("HelloJava");\par
        System.out.println(sObj.getObject());\par
    \}\par
\}\par
\cf2\par
\cf3\b Harshit Mimani (to Everyone)\b0 : \cf1 11:24: Java\par
15\par
\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 11:24: Java \par
15\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 11:24: Java\par
15\cf2\par
\cf3\b Mohit Rai (to Everyone)\b0 : \cf1 11:24: Java \par
15\par
\cf2\par
\cf3\b Sumukh G (to Everyone)\b0 : \cf1 11:24: Java\par
15\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 11:24: Java\par
15\cf2\par
\cf3\b abhishek rana (to Everyone)\b0 : \cf1 11:24: Java \par
15\par
\cf2\par
\cf3\b yashas anand (to Everyone)\b0 : \cf1 11:25: Maam, What advantage do we get by using generics in our program\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 11:25: Java \par
15\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:25: class Test<T, U> \{\par
    T obj1;  // An object of type T\par
    U obj2;  // An object of type U\par
     // constructor\par
    Test(T obj1, U obj2)     \{\par
        this.obj1 = obj1;\par
        this.obj2 = obj2;\par
    \}\par
     // To print objects of T and U\par
    public void print()     \{\par
        System.out.println(obj1);\par
        System.out.println(obj2);\par
    \}\par
\}\par
 // Driver class to test above\par
public class Main \{\par
    public static void main (String[] args)     \{\par
        Test <String, Integer> obj = new Test<String, Integer>("Java", 15);\par
         obj.print();\par
    \}\par
\}\par
\par
\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 11:25: Java \par
15\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 11:25: Java\par
15\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 11:25: Java\par
15\par
\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 11:25: Java\par
15\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 11:26: Java\par
15\cf2\par
\cf3\b MAYANK KUMAR (to Everyone)\b0 : \cf1 11:26: Java\par
15\par
\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 11:26: Java\par
15\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 11:27: Java\par
15\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:30: import java.util.*;\par
 class Test \{\par
    public static void main(String[] args)    \{\par
        // Creatinga an ArrayList without any type specified\par
        ArrayList al = new ArrayList();\par
         al.add("Sachin");\par
        al.add("Rahul");\par
        al.add(10); // Compiler allows this\par
         String s1 = (String)al.get(0);\par
        String s2 = (String)al.get(1);\par
 \par
        // Causes Runtime Exception\par
        String s3 = (String)al.get(2);\par
    \}\par
\}\par
\cf2\par
\cf3\b Saloni Dhawan (to Everyone)\b0 : \cf1 11:34: Mam can you share this ppt on whatsapp group ?\cf2\par
\cf3\b Saloni Dhawan (to Everyone)\b0 : \cf1 11:35: ok mam\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 11:38: Exception in thread "main" java.lang.ClassCastException: class java.lang.Integer cannot be cast to class java.lang.String (java.lang.Integer and java.lang.String are in module java.base of loader 'bootstrap')\par
\tab at Test4.main(Test4.java:13)\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 11:40: mam Please reapeat it again\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 11:41: Exception in thread "main" java.lang.ClassCastException: class java.lang.Integer cannot be cast to class java.lang.String (java.lang.Integer and java.lang.String are in module java.base of loader 'bootstrap')\par
\tab at Test.main(Test.java:14)\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 11:42: Exception in thread "main" java.lang.ClassCastException: class java.lang.Integer cannot be cast to class java.lang.String (java.lang.Integer and java.lang.String are in module java.base of loader 'bootstrap')\par
\tab at pkg1.Average.main(Average.java:17)\par
\cf2\par
\cf3\b yashas anand (to Everyone)\b0 : \cf1 11:43: maam, is arraylist an array or a list?\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 11:46: yashas , at runtime we can change the size in arraylist\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 11:46: is it similar to linked list??\cf2\par
\cf3\b yashas anand (to Everyone)\b0 : \cf1 11:46: so arraylist is like vector in c++?\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 11:47: new capacity of arraylist = (current capacity*3/2)+1\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:51: // Using generics converts run time exceptions into  compile time exception.\par
import java.util.*;\par
class Test \{\par
    public static void main(String[] args)     \{\par
        // Creating a an ArrayList with String specified\par
        ArrayList <String> al = new ArrayList<String> ();\par
        al.add("Sachin");\par
        al.add("Rahul");\par
         // Now Compiler doesn't allow this\par
        al.add(10); \par
         String s1 = (String)al.get(0);\par
        String s2 = (String)al.get(1);\par
        String s3 = (String)al.get(2);\par
    \}\par
\}\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:51: import java.util.*;\par
 class Test \{\par
    public static void main(String[] args)    \{\par
        // Creatinga an ArrayList without any type specified\par
        ArrayList<String> al = new ArrayList<String>();\par
         al.add("Sachin");\par
        al.add("Rahul");\par
        al.add("10"); // Compiler does not allow this\par
         String s1 = (String)al.get(0);\par
        String s2 = (String)al.get(1);\par
 \par
        // Causes Runtime Exception\par
        String s3 = (String)al.get(2);\par
    \}\par
\}\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:54: import java.util.*;\par
 class Test \{\par
    public static void main(String[] args)    \{\par
        // Creatinga an ArrayList without any type specified\par
        ArrayList<String> al = new ArrayList<String>();\par
         al.add("Sachin");\par
        al.add("Rahul");\par
        al.add("10"); // Compiler does not allow this\par
         String s1 =al.get(0);\par
        String s2 = al.get(1);\par
 \par
        // Causes Runtime Exception\par
        String s3 = al.get(2);\par
    \}\par
\}\par
\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 11:55: mam no error\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:57: Create a generic Class Employee which takes Empid to be of generic type. Name should always be String. \par
Add required functionalities to add(), show() employees.\par
Show the working structure for the class.\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 12:11: E \endash  Element (used extensively by the Java Collections Framework, for example ArrayList, Set etc.)\par
K \endash  Key (Used in Map)\par
N \endash  Number\par
T \endash  Type\par
V \endash  Value (Used in Map)\par
S,U,V etc. \endash  2nd, 3rd, 4th types\par
\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 12:34: correct\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 12:34: correct\cf2\par
\cf3\b yashas anand (to Everyone)\b0 : \cf1 12:34: correct\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 12:34: correct\cf2\par
\cf3\b Harshit Mimani (to Everyone)\b0 : \cf1 12:35: class Employee<T> \{\par
\tab String name;\par
\tab T Emp_Id;\par
\par
\tab\par
\par
\tab public void input(String name, T Emp_Id)\par
\tab\{\par
\tab\tab this.name = name;\par
\tab\tab this.Emp_Id = Emp_Id;\par
\tab\}\par
\tab\par
\tab public void show() \{\par
\tab\tab System.out.println("name: " + name + "Emp_Id " + Emp_Id);\par
\par
\tab\}\par
\par
\}\par
\par
public class Main\par
\{\par
\tab public static void main(String[] args)\par
\tab\{\par
\tab\tab Employee<String> E = new Employee<String>();\par
\tab\tab E.input("Harshit","10");\par
\tab\tab E.show();\par
\tab\}\par
\}\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 12:42: https://www.javatpoint.com/java-tutorial\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 12:42: https://www.tutorialspoint.com/java/index.htm\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 12:48: Jenskov\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 12:49: jenkov mam\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 12:55: int size( );\par
boolean isEmpty( );\par
boolean contains(Object e);\par
boolean add(Object e);       \par
boolean remove(Object e); \par
Iterator iterator( );\par
\par
boolean containsAll(Collection c);\par
boolean addAll(Collection c); boolean removeAll(Collection c);\par
boolean retainAll(Collection c);\par
void clear( );\par
\par
Object[ ] toArray( );\par
Object[ ] toArray(Object a[ ]);\par
\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 12:56: Implements a List collection\par
Dynamically growable array (50%)\par
Has a numeric index\par
Allows duplicate items\par
This class is roughly equivalent to Vector, except that it is unsynchronized.\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 12:56: add( Object o)\par
add(int index, Object o)\par
remove(Object o)\par
remove(int index)\par
set(int index, Object o)\par
int indexOf(Object o)\par
Object get(int index)\par
int size()\par
boolean contains(Object o)\par
clear()\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 12:57: import java.util.*;  \par
class JavaExample\{  \par
   public static void main(String args[])\{  \par
      ArrayList<String> alist=new ArrayList<String>();  \par
      alist.add("Steve");\par
      alist.add("Tim");\par
      alist.add("Lucy");\par
      alist.add("Pat");\par
      alist.add("Tom");\par
       //displaying elements\par
      System.out.println(alist);\par
      //Adding "Steve" at the fourth position\par
      alist.add(3, "Steve");\par
      //displaying elements\par
      System.out.println(alist);\par
   \}  \par
\}\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 12:58: [Steve, Tim, Lucy, Pat, Tom]\par
[Steve, Tim, Lucy, Steve, Pat, Tom]\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 12:58: [Steve, Tim, Lucy, Pat, Tom]\par
[Steve, Tim, Lucy, Steve, Pat, Tom]\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 12:58: [Steve, Tim, Lucy, Pat, Tom]\par
[Steve, Tim, Lucy, Steve, Pat, Tom]\par
\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 12:58: [Steve, Tim, Lucy, Pat, Tom]\par
[Steve, Tim, Lucy, Steve, Pat, Tom]\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 12:59: [Steve, Tim, Lucy, Pat, Tom]\par
[Steve, Tim, Lucy, Steve, Pat, Tom]\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 12:59: [Steve, Tim, Lucy, Pat, Tom]\par
[Steve, Tim, Lucy, Steve, Pat, Tom]\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 12:59: [Steve, Tim, Lucy, Pat, Tom]\par
[Steve, Tim, Lucy, Steve, Pat, Tom]\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 12:59: [Steve, Tim, Lucy, Pat, Tom]\par
[Steve, Tim, Lucy, Steve, Pat, Tom]\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 12:59: [Steve, Tim, Lucy, Pat, Tom]\par
[Steve, Tim, Lucy, Steve, Pat, Tom]\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 12:59: [Steve, Tim, Lucy, Pat, Tom]\par
[Steve, Tim, Lucy, Steve, Pat, Tom]\par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 12:59: [Steve, Tim, Lucy, Pat, Tom]\par
[Steve, Tim, Lucy, Steve, Pat, Tom]\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 12:59: [Steve, Tim, Lucy, Pat, Tom]\par
[Steve, Tim, Lucy, Steve, Pat, Tom]\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 12:59: [Steve, Tim, Lucy, Pat, Tom]\par
[Steve, Tim, Lucy, Steve, Pat, Tom]\par
\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 12:59: [Steve, Tim, Lucy, Pat, Tom]\par
[Steve, Tim, Lucy, Steve, Pat, Tom]\par
\cf2\par
\cf3\b Harshit Mimani (to Everyone)\b0 : \cf1 12:59: [Steve, Tim, Lucy, Pat, Tom]\par
[Steve, Tim, Lucy, Steve, Pat, Tom]\cf2\par
\cf3\b MAYANK KUMAR (to Everyone)\b0 : \cf1 13:00: [Steve, Tim, Lucy, Pat, Tom]\par
[Steve, Tim, Lucy, Steve, Pat, Tom]\par
\cf2\par
\cf3\b Saloni Dhawan (to Everyone)\b0 : \cf1 13:00: [Steve, Tim, Lucy, Pat, Tom]\par
[Steve, Tim, Lucy, Steve, Pat, Tom]\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 13:01: thank you mam\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 13:01: thank you mam\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 13:01: Thank you m'am\cf2\par
\cf3\b MAYANK KUMAR (to Everyone)\b0 : \cf1 13:01: thank you maam\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 13:01: Thanku mam\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 13:01: Thnakyou ma'am...\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 13:01: Thank you Maam\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 13:01: Thank you ma'am.\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 13:01: thank you maam\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 13:01: thank you mam\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 13:01: Thanku Ma'am\cf2\par
\cf3\b Harshit Mimani (to Everyone)\b0 : \cf1 13:01: thank you maam\cf2\par
\cf3\b Saloni Dhawan (to Everyone)\b0 : \cf1 13:01: Thank you mam\cf2\par
\cf3\b yashas anand (to Everyone)\b0 : \cf1 13:01: [Steve, Tim, Lucy, Pat, Tom]\par
[Steve, Tim, Lucy, Steve, Pat, Tom]\par
\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 13:01: ThankU mam\cf2\par
\cf3\b Saloni Dhawan (to Everyone)\b0 : \cf1 13:02: Okay mam\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 13:02: Thank you ma'am\cf2\par
\cf3\b Saloni Dhawan (to Everyone)\b0 : \cf1 13:02: Thank you mam\cf2\par
\cf3\b yashas anand (to Everyone)\b0 : \cf1 13:02: thank you maam\par
\cf0\par
}
 