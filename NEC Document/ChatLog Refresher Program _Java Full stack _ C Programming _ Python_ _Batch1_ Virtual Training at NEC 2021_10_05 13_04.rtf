{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fcharset0 Segoe UI;}}
{\colortbl ;\red0\green0\blue0;\red255\green255\blue255;\red59\green182\blue60;\red182\green59\blue60;}
\viewkind4\uc1\pard\cf1\b\f0\fs24 Chat Log   C:\\Users\\acer\\Documents\\ChatLog Refresher Program _Java Full stack _ C Programming _ Python_ _Batch1_ Virtual Training at NEC 2021_10_05 13_04.rtf\b0\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 08:59: good morrning ma'am\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 09:00: good morning ma'am\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 09:00: good morrning ma'am\par
\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 09:00: Good Morning mam\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 09:00: good morning maam\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 09:01: Good Morning Ma'am\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 09:04: Ma'am Recording\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 09:04: Recording mam\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:05: Topic: Globalization:\par
Internationalization: i18n\par
Localization : l10n\par
Locale\par
(Resource)\par
Presenter: Deep Shikhar Singh\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:14: import java.util.*;\par
import java.util.function.*;\par
\par
public class Test \{\par
\tab public static void main(String args[]) \{\par
\tab\tab Function<String, Integer> t5 = String::length;\par
\tab\tab System.out.println(t5.apply("Java Coders"));\par
\tab\tab Function<String, String> t6 = String::toUpperCase;\par
\tab\tab System.out.println(t6.apply("Java Coders"));\par
\tab\}\par
\}\par
\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 09:14: 11\par
JAVA CODERS\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 09:14: 11\par
JAVA CODERS\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 09:14: 11\par
JAVA CODERS\par
\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 09:14: 11\par
JAVA CODERS\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 09:14: 11\par
JAVA CODERS\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 09:14: 11\par
JAVA CODERS\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 09:14: 11\par
JAVA CODERS\par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 09:14: 11\par
JAVA CODERS\par
\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 09:14: 11\par
JAVA CODERS\par
\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 09:15: 11\par
JAVA CODERS\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 09:15: 11\par
JAVA CODERS\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 09:15: 11\par
JAVA CODERS\par
\cf2\par
\cf3\b Chirag Yadav (to Everyone)\b0 : \cf1 09:15: 11\par
JAVA CODERS\par
\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 09:15: 11\par
JAVA CODERS\par
\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 09:15: 11\par
JAVA CODERS\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 09:15: 11\par
JAVA CODERS\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 09:15: 11\par
JAVA CODERS\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 09:15: 11\par
JAVA CODERS\par
\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 09:15: 11\par
JAVA CODERS\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:16: // importing Function interface  \par
import java.util.function.Function;  \par
public class FunctionInterfaceExample \{  \par
    static String show(String message)\{  \par
        return "Hello "+message;  \par
    \}  \par
    public static void main(String[] args) \{  \par
        // Function interface referring to a method  \par
        Function<String, String> fun = FunctionInterfaceExample::show;  \par
        // Calling Function interface method  \par
        System.out.println(fun.apply("Peter"));  \par
    \}  \par
\} \par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 09:16: Hello Peter\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 09:16: Hello Peter\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 09:17: Hello Peter\par
\cf2\par
\cf3\b Harshit Mimani (to Everyone)\b0 : \cf1 09:17: Hello Peter\par
\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 09:17: Hello Peter\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 09:17: Hello Peter\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 09:17: Hello Peter\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 09:17: Hello Peter\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 09:17: Hello Peter\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 09:17: Hello Peter\par
\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 09:17: Hello Peter\par
\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 09:17: Hello Peter\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 09:17: Hello Peter\par
\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 09:17: Hello Peter\par
\cf2\par
\cf3\b MAYANK KUMAR (to Everyone)\b0 : \cf1 09:17: // importing Function interface  \par
import java.util.function.Function;  \par
public class FunctionInterfaceExample \{  \par
    static String show(String message)\{  \par
        return "Hello "+message;  \par
    \}  \par
    public static void main(String[] args) \{  \par
        // Function interface referring to a method  \par
        Function<String, String> fun = FunctionInterfaceExample::show;  \par
        // Calling Function interface method  \par
        System.out.println(fun.apply("Peter"));  \par
    \}  \cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 09:18: Hello Peter\cf2\par
\cf3\b MAYANK KUMAR (to Everyone)\b0 : \cf1 09:18: Hello Peter\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 09:18: Hello Peter\par
\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 09:18: Hello Peter\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 09:18: Hello Peter\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 09:19: Hello Peter\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:20: package a;\par
\par
import java.util.*;\par
import java.util.function.*;\par
\par
public class Test \{\par
\tab public static void main(String args[]) \{\par
\tab\tab Supplier<Integer> t4=()->12;\par
\tab\tab System.out.println(t4.get());\par
\tab\}\par
\}\par
\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 09:20: 12\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 09:20: 12\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 09:20: 12\par
\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 09:20: 12\par
\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 09:21: 12\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 09:21: 12\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 09:21: 12\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 09:21: 12\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 09:21: 12\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 09:21: 12\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 09:21: 12\par
\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 09:21: 12\par
\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 09:21: 12\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 09:21: 12\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:21: package a;\par
\par
import java.util.*;\par
import java.util.function.*;\par
\par
public class Test \{\par
\tab public static void main(String args[]) \{\par
\tab\tab Supplier<Integer> t4=()->12;\par
\tab\tab Consumer<Integer> t3=System.out::println;\par
\tab\tab t3.accept(t4.get());\par
\tab\}\par
\}\par
\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 09:21: 12\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 09:22: 12\par
\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 09:22: 12\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 09:22: 12\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 09:23: 12\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 09:23: 12\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:23: import java.util.ArrayList;\par
import java.util.List;\par
import java.util.function.Supplier;\par
public class SupplierTest \{\par
\tab public static void main(String[] args) \{\par
\tab\tab List<String> names = new ArrayList<String>();\par
\tab\tab names.add("Harry");\par
\tab\tab names.add("Daniel");\par
\tab\tab names.add("Lucifer");\tab\tab\par
\tab\tab names.add("O' Neil");\par
\tab\tab names.stream().forEach((item)-> \{\par
\tab\tab\tab printNames(()-> item);\par
\tab\tab\});\par
\tab\}\par
\tab private static void printNames(Supplier<String> supplier) \{\par
\tab\tab System.out.println(supplier.get());\par
\tab\}\par
\}\par
\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 09:24: Harry\par
Daniel\par
Lucifer\par
O' Neil\par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 09:24: Harry\par
Daniel\par
Lucifer\par
O' Neil\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 09:24: Harry\par
Daniel\par
Lucifer\par
O' Neil\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 09:24: Harry\par
Daniel\par
Lucifer\par
O' Neil\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 09:24: Harry\par
Daniel\par
Lucifer\par
O' Neil\par
\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 09:24: Harry\par
Daniel\par
Lucifer\par
O' Neil\par
\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 09:24: Harry\par
Daniel\par
Lucifer\par
O' Neil\par
\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 09:24: Harry\par
Daniel\par
Lucifer\par
O' Neil\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 09:24: Harry\par
Daniel\par
Lucifer\par
O' Neil\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 09:24: Harry\par
Daniel\par
Lucifer\par
O' Neil\par
\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 09:24: Harry\par
Daniel\par
Lucifer\par
O' Neil\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 09:24: Harry\par
Daniel\par
Lucifer\par
O' Neil\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 09:24: Harry\par
Daniel\par
Lucifer\par
O' Neil\par
\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 09:24: Harry\par
Daniel\par
Lucifer\par
O' Neil\par
\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 09:25: Harry\par
Daniel\par
Lucifer\par
O' Neil\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 09:25: Harry\par
Daniel\par
Lucifer\par
O' Neil\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:25: import java.util.Date;\par
import java.util.function.Supplier;\par
public class SupplierTest \{\par
 public static void main(String args[]) \{\par
  //Supplier instance with lambda expression\par
  Supplier<String> helloStrSupplier = () -> new String("Hello");\par
  String helloStr = helloStrSupplier.get();\par
  System.out.println("String in helloStr is->"+helloStr+"<-");\par
  //Supplier instance using method reference to default constructor\par
  Supplier<String> emptyStrSupplier = String::new;\par
  String emptyStr = emptyStrSupplier.get();\par
  System.out.println("String in emptyStr is->"+emptyStr+"<-");\par
  //Supplier instance using method reference to a static method\par
  Supplier<Date> dateSupplier= SupplierTest::getSystemDate;\par
  Date systemDate = dateSupplier.get();\par
  System.out.println("systemDate->" + systemDate);\par
 \}\par
 public static Date getSystemDate() \{\par
  return new Date();\par
 \}\par
\}\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 09:25: String in helloStr is->Hello<-\par
String in emptyStr is-><-\par
systemDate->Tue Oct 05 09:25:48 IST 2021\par
\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 09:25: String in helloStr is->Hello<-\par
String in emptyStr is-><-\par
systemDate->Tue Oct 05 09:25:45 IST 2021\par
\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 09:25: String in helloStr is->Hello<-\par
String in emptyStr is-><-\par
systemDate->Tue Oct 05 09:25:49 IST 2021\par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 09:26: String in helloStr is->Hello<-\par
String in emptyStr is-><-\par
systemDate->Tue Oct 05 09:25:57 IST 2021\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 09:26: String in helloStr is->Hello<-\par
String in emptyStr is-><-\par
systemDate->Tue Oct 05 09:25:53 IST 2021\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 09:26: String in helloStr is->Hello<-\par
String in emptyStr is-><-\par
systemDate->Tue Oct 05 09:26:04 IST 2021\par
\cf2\par
\cf3\b Harshit Mimani (to Everyone)\b0 : \cf1 09:26: String in helloStr is->Hello<-\par
String in emptyStr is-><-\par
systemDate->Tue Oct 05 09:25:56 IST 2021\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 09:26: String in helloStr is->Hello<-\par
String in emptyStr is-><-\par
systemDate->Tue Oct 05 03:56:06 GMT 2021\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 09:26: Harry\par
Daniel\par
Lucifer\par
O' Neil\par
\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 09:26: String in helloStr is->Hello<-\par
String in emptyStr is-><-\par
systemDate->Tue Oct 05 09:26:00 IST 2021\par
\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 09:26: String in helloStr is->Hello<-\par
String in emptyStr is-><-\par
systemDate->Tue Oct 05 09:25:52 IST 2021\par
\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 09:26: String in helloStr is->Hello<-\par
String in emptyStr is-><-\par
systemDate->Tue Oct 05 09:26:01 IST 2021\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 09:26: String in helloStr is->Hello<-\par
String in emptyStr is-><-\par
systemDate->Tue Oct 05 09:25:53 IST 2021\par
\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 09:26: String in helloStr is->Hello<-\par
String in emptyStr is-><-\par
systemDate->Tue Oct 05 09:25:52 IST 2021\par
\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 09:26: String in helloStr is->Hello<-\par
String in emptyStr is-><-\par
systemDate->Tue Oct 05 09:25:59 IST 2021\par
\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 09:26: String in helloStr is->Hello<-\par
String in emptyStr is-><-\par
systemDate->Tue Oct 05 09:25:53 IST 2021\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 09:26: String in helloStr is->Hello<-\par
String in emptyStr is-><-\par
systemDate->Tue Oct 05 09:26:08 IST 2021\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 09:26: String in helloStr is->Hello<-\par
String in emptyStr is-><-\par
systemDate->Tue Oct 05 09:25:53 IST 2021\par
\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 09:27: String in helloStr is->Hello<-\par
String in emptyStr is-><-\par
systemDate->Tue Oct 05 09:26:04 IST 2021\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 09:27: String in helloStr is->Hello<-\par
String in emptyStr is-><-\par
systemDate->Tue Oct 05 09:26:04 IST 2021\par
\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 09:30: String in helloStr is->Hello<-\par
String in emptyStr is-><-\par
systemDate->Tue Oct 05 09:29:51 IST 2021\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:33: Design a static calculator by using the above functional interfaces.\par
MathOp interface linked via built-in functional Interface. \par
Hint: instead of MathOp use BiFunction\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 09:40: import java.util.function.*;\par
public class Fun_Interference_Exercise \{\par
 public static void main(String args[]) \{\par
  BiFunction<Integer, Integer,Integer> add=(x,y)->x+y;\par
  System.out.println(add.apply(5,3));\par
  BiFunction<Integer, Integer,Integer> sub=(x,y)->\{return (x > y) ? x - y : y - x;\};\par
  System.out.println(sub.apply(5,3));\par
  BiFunction<Integer, Integer,Integer> mul=(x,y)->x*y;\par
  System.out.println(mul.apply(5,3));\par
  BiFunction<Integer, Integer,Integer> div=(x,y)->\{return (y == 0 ? y : x / y);\};\par
  System.out.println(div.apply(6,3));\par
 \}\par
\}\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 09:43: Ma'am why we need to import functions from util library when we have imported util.* ?\cf2\par
\cf4\b Atul Gupta (to Monica)\b0 : \cf1 09:43: import java.util.function.*;\par
public class Admin \{\par
 public static void main(String args[]) \{\par
  BiFunction<Integer, Integer,Integer> add=(x,y)->x+y;\par
  System.out.println(add.apply(10,2));\par
  BiFunction<Integer, Integer,Integer> sub=(x,y)->x-y;\par
  System.out.println(sub.apply(12,3));\par
  BiFunction<Integer, Integer,Integer> mul=(x,y)->x*y;\par
  System.out.println(mul.apply(5,20));\par
  BiFunction<Integer, Integer,Integer> div=(x,y)->x/y;\par
  System.out.println(div.apply(6,1));\par
 \}\par
\}\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:49: import java.util.function.LongConsumer;\par
public class LongConsumerExample \{\par
   public static void main(String[] args) \{\par
      LongConsumer consumer = (a) -> \{\par
         long b = a * a;\par
         System.out.println(b);\par
      \};\par
      consumer.accept(10);\par
      consumer.accept(100);\par
      consumer.accept(1000);\par
   \}\par
\}\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 09:49: 100\par
10000\par
1000000\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:50: import java.util.function.LongSupplier;\par
public class LongSupplierExample \{\par
  public static void main(String[] args) \{\par
    LongSupplier supplier = () -> 10l;\par
    System.out.println(supplier.getAsLong());\par
    double value = 451.456;\par
    LongSupplier supplier2 = () -> new Double(value).longValue();\par
    System.out.println(supplier2.getAsLong());\par
  \}\par
\}\par
\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 09:50: 100\par
10000\par
1000000\par
\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 09:50: 100\par
10000\par
1000000\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 09:50: 100\par
10000\par
1000000\par
\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 09:50: 100\par
10000\par
1000000\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 09:50: 10\par
451\par
\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 09:50: 100\par
10000\par
1000000\par
\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 09:50: 100\par
10000\par
1000000\par
\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 09:50: 100\par
10000\par
1000000\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 09:50: 10\par
451\cf2\par
\cf3\b Harshit Mimani (to Everyone)\b0 : \cf1 09:50: 10\par
451\par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 09:51: 100\par
10000\par
1000000\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 09:51: 100\par
10000\par
1000000\par
\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 09:51: 10\par
451\par
\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 09:51: 10\par
451\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 09:51: 10\par
451\par
\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 09:51: 10\par
451\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 09:51: 10\par
451\par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 09:51: 10\par
451\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 09:51: 10\par
451\par
\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 09:51: 100\par
10000\par
1000000\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 09:51: 10\par
451\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 09:51: 10\par
451\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 09:51: 10\par
451\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 09:51: 10\par
451\par
\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 09:51: 10\par
451\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:51: import java.util.function.BiPredicate;\par
class BiPredicateExample \{\par
\tab public static void main(String[] args) \{\par
\tab\tab BiPredicate<String, String> predicate = (s1, s2) -> (s1.equals(s2));\par
\tab\tab System.out.println(predicate.test("Java", "Java"));\par
\tab\tab System.out.println(predicate.test("JAVA", "Hello"));\par
\tab\}\par
\}\par
\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 09:52: true\par
false\par
\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 09:52: true\par
false\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 09:52: true\par
false\par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 09:52: true\par
false\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 09:52: true\par
false\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 09:52: true\par
false\par
\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 09:52: true\par
false\par
\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 09:52: true\par
false\par
\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 09:52: 10\par
451\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 09:53: true\par
false\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 09:53: true\par
false\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 09:53: true\par
false\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 09:53: true\par
false\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 09:53: true\par
false\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 09:53: true\par
false\par
\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 09:53: true\par
false\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 09:54: true\par
false\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 09:54: true\par
false\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 09:54: true\par
false\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:55: How will you print unique squares of numbers in java 8?\par
How will you print count of empty strings in java 8?\par
How will you get the highest number present in a list using Java 8?\par
How will you get the lowest number present in a list using Java 8?\par
How will you get the sum of all numbers present in a list using Java 8?\par
How will you get the average of all numbers present in a list using Java 8?\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:58: done\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 10:05: done\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 10:05: done\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 10:06: Done\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 10:06: done\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 10:07: done\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 10:07: done\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 10:07: done\cf2\par
\cf3\b Harshit Mimani (to Everyone)\b0 : \cf1 10:07: done\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 10:07: done\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 10:07: done\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 10:07: done\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 10:07: done\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 10:07: done\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 10:07: done\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 10:07: Done\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 10:07: Done\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 10:07: done\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 10:07: done\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 10:08: done\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:10: // Java code for Stream map(Function mapper) to get a stream by applying the given function to this stream. \par
import java.util.*; \par
 class StreamMap \{ \par
    public static void main(String[] args)      \{ \par
         System.out.println("The stream after applying the function is : "); \par
         // Creating a list of Integers \par
        List<Integer> list = Arrays.asList(3, 6, 9, 12, 15); \par
         // Using Stream map(Function mapper) and displaying the corresponding new stream \par
        list.stream().map(number -> number * 3).forEach(System.out::println); \par
    \} \par
\} \par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 10:11: The stream after applying the function is : \par
9\par
18\par
27\par
36\par
45\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 10:11: The stream after applying the function is : \par
9\par
18\par
27\par
36\par
45\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 10:11: The stream after applying the function is : \par
9\par
18\par
27\par
36\par
45\par
\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 10:11: The stream after applying the function is : \par
9\par
18\par
27\par
36\par
45\par
\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 10:11: The stream after applying the function is : \par
9\par
18\par
27\par
36\par
45\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 10:11: The stream after applying the function is : \par
9\par
18\par
27\par
36\par
45\par
\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 10:11: The stream after applying the function is : \par
9\par
18\par
27\par
36\par
45\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 10:11: The stream after applying the function is : \par
9\par
18\par
27\par
36\par
45\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 10:11: The stream after applying the function is : \par
9\par
18\par
27\par
36\par
45\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 10:11: The stream after applying the function is : \par
9\par
18\par
27\par
36\par
45\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 10:11: The stream after applying the function is : \par
9\par
18\par
27\par
36\par
45\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 10:11: The stream after applying the function is : \par
9\par
18\par
27\par
36\par
45\par
\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 10:12: The stream after applying the function is : \par
9\par
18\par
27\par
36\par
45\par
\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 10:12: The stream after applying the function is : \par
9\par
18\par
27\par
36\par
45\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 10:12: The stream after applying the function is : \par
9\par
18\par
27\par
36\par
45\par
\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 10:12: The stream after applying the function is : \par
9\par
18\par
27\par
36\par
45\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 10:12: The stream after applying the function is : \par
9\par
18\par
27\par
36\par
45\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:13: Find the length of a list of strings individually with the help of maps.\par
WAP in Java8 to convert a list of Strings to lower case.\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 10:13: The stream after applying the function is : \par
9\par
18\par
27\par
36\par
45\par
\cf2\par
\cf4\b Atul Gupta (to Monica)\b0 : \cf1 10:19: import java.util.*; \par
class StreamMap \{ \par
   public static void main(String[] args)      \{ \par
        \par
   \par
       List<String> list = Arrays.asList("hello", "how","is","all"); \par
       \par
       list.stream().map(ele -> ele.length()).forEach(System.out::println); \par
       list.stream().map(ele -> ele.toLowerCase()).forEach(System.out::println); \par
   \} \par
\}\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:20: package a;\par
import java.util.*;\par
import java.util.function.*;\par
\par
public class Test \{\par
\tab public static void main(String args[]) \{\par
\tab\tab List<String> l=Arrays.asList("Java", "Coders", "Are", "Programmers");\par
\tab\tab l.stream().map(String::length).forEach(System.out::println);\par
\tab\tab l.stream().map(String::toLowerCase).forEach(System.out::println);\par
\tab\}\par
\}\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:24: Intermediate Operations:\par
Stream.filter()\par
Stream.map()\par
Stream.distinct()\par
Stream.peek()\par
Terminal Operations:\par
Stream.collect()\par
Stream.min() / Stream.max()\par
Stream.findAny()\par
Stream.findFirst()\par
Stream.count()\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:25: import java.util.Arrays;\par
import java.util.List;\par
import java.util.stream.Collectors;\par
public class SimpleCollector \{\par
    public static void main(String[] args) \{\par
        List<Integer> numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);\par
//get list of unique squares\par
List<Integer> squaresList = numbers.stream().map( i -> i*i).distinct().collect(Collectors.toList());\par
 System.out.println(squaresList);\par
    \}\par
\}\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 10:26: [9, 4, 49, 25]\par
\cf2\par
\cf4\b Atul Gupta (to Monica)\b0 : \cf1 10:26: [9, 4, 49, 25]\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 10:26: [9, 4, 49, 25]\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 10:26: [9, 4, 49, 25]\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 10:26: [9,4, 49, 25]\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 10:26: [9, 4, 49, 25]\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 10:26: [9, 4, 49, 25]\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 10:26: [9, 4, 49, 25]\par
\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 10:26: [9, 4, 49, 25]\par
\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 10:26: [9, 4, 49, 25]\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 10:26: [9, 4, 49, 25]\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 10:26: [9, 4, 49, 25]\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 10:27: [9, 4, 49, 25]\par
\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 10:27: [9, 4, 49, 25]\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 10:27: [9, 4, 49, 25]\par
\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 10:27: [9, 4, 49, 25]\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:28: import java.util.stream.*;\par
import java.util.*;\par
import java.util.function.*;\par
public class SimpleStream2 \{\par
   public static void main(String args[]) \{\par
      Stream<String> words = Stream.of("lower", "case", "text");\par
List<String> list = words\par
    .peek(s -> System.out.println(s))\par
    .map(s -> s.toUpperCase())\par
    .collect(Collectors.toList());\par
System.out.println(list);\par
   \}\par
\}\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 10:29: lower\par
case\par
text\par
[LOWER, CASE, TEXT]\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 10:29: lower\par
case\par
text\par
[LOWER, CASE, TEXT]\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 10:29: lower\par
case\par
text\par
[LOWER, CASE, TEXT]\par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 10:29: lower\par
case\par
text\par
[LOWER, CASE, TEXT]\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 10:29: lower\par
case\par
text\par
[LOWER, CASE, TEXT]\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 10:29: lower\par
case\par
text\par
[LOWER, CASE, TEXT]\par
\cf2\par
\cf3\b Harshit Mimani (to Everyone)\b0 : \cf1 10:29: lower\par
case\par
text\par
[LOWER, CASE, TEXT]\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 10:29: lower\par
case\par
text\par
[LOWER, CASE, TEXT]\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 10:29: lower\par
case\par
text\par
[LOWER, CASE, TEXT]\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 10:29: lower\par
case\par
text\par
[LOWER, CASE, TEXT]\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:29: Tea break 15 min\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 10:29: lower\par
case\par
text\par
[LOWER, CASE, TEXT]\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 10:29: lower\par
case\par
text\par
[LOWER, CASE, TEXT]\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 10:29: lower\par
case\par
text\par
[LOWER, CASE, TEXT]\par
\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 10:30: lower\par
case\par
text\par
[LOWER, CASE, TEXT]\par
\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 10:30: lower\par
case\par
text\par
[LOWER, CASE, TEXT]\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 10:30: lower\par
case\par
text\par
[LOWER, CASE, TEXT]\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 10:30: lower\par
case\par
text\par
[LOWER, CASE, TEXT]\par
\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 10:30: lower\par
case\par
text\par
[LOWER, CASE, TEXT]\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 10:31: lower\par
case\par
text\par
[LOWER, CASE, TEXT]\par
\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 10:34: lower\par
case\par
text\par
[LOWER, CASE, TEXT]\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 10:45: back\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 10:45: BACK\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 10:45: back\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 10:45: back\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 10:45: back\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 10:45: Back\cf2\par
\cf3\b Harshit Mimani (to Everyone)\b0 : \cf1 10:45: back\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 10:45: back\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 10:45: back\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 10:45: back\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 10:45: back\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 10:45: Back\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 10:45: back\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 10:45: back\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 10:46: back\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:46: import java.util.ArrayList;\par
import java.util.stream.*;\par
import java.util.Arrays;\par
import java.util.List;\par
import java.util.stream.Collectors;\par
public class SimpleStream2 \{\par
   public static void main(String args[]) \{\par
      List<String> list = Arrays.asList("Java", "is", "not", "great");\par
list.stream()\par
    .filter(s -> !s.startsWith("n"))\par
    .map(String::toUpperCase)\par
    .forEach(s -> System.out.print(s + " "));\par
   \}\par
\}\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 10:47: JAVA IS GREAT \cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 10:47: JAVA IS GREAT \cf2\par
\cf3\b Harshit Mimani (to Everyone)\b0 : \cf1 10:47: JAVA IS GREAT \cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 10:47: JAVA IS GREAT\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 10:47: JAVA IS GREAT\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 10:47: JAVA IS GREAT \cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 10:47: JAVA IS GREAT \cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 10:47: JAVA IS GREAT \cf2\par
\cf3\b Chirag Yadav (to Everyone)\b0 : \cf1 10:47: JAVA IS GREAT \par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 10:47: JAVA IS GREAT \par
\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 10:47: JAVA IS GREAT \cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 10:47: JAVA IS GREAT \cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 10:47: JAVA IS GREAT \cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 10:47: JAVA IS GREAT \cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 10:47: JAVA IS GREAT \par
\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 10:47: JAVA IS GREAT \cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 10:47: JAVA IS GREAT\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:48: import java.util.ArrayList;\par
import java.util.List;\par
public class JavaForEachListFilter \{\par
    public static void main(String[] args) \{\par
        List<String> items = new ArrayList<>();\par
\par
        items.add("coins");\par
        items.add("pens");\par
        items.add("keys");\par
        items.add("sheets");\par
\par
        items.stream().filter(item -> (item.length() == 4)).forEach(System.out::println);\par
    \}\par
\}\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 10:48: pens\par
keys\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 10:48: pens\par
keys\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 10:48: pens\par
keys\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 10:48: pens\par
keys\par
\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 10:48: pens\par
keys\par
\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 10:48: pens\par
keys\par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 10:49: pens\par
keys\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 10:49: pens\par
keys\cf2\par
\cf3\b Chirag Yadav (to Everyone)\b0 : \cf1 10:49: pens\par
keys\\\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 10:49: pens\par
keys\par
\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 10:49: pens\par
keys\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 10:49: pens\par
keys\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 10:49: pens\par
keys\par
\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 10:49: pens\par
keys\par
\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 10:49: pens\par
keys\par
\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 10:49: pens\par
keys\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 10:49: pens\par
keys\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 10:50: pens\par
keys\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:50: From a List of string, print non empty strings using filter.\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:52: import java.util.stream.*;\par
import java.util.*;\par
import java.util.function.*;\par
public class SimpleStream2 \{\par
   public static void main(String args[]) \{\par
      Random random = new Random();\par
random.ints().limit(10).forEach(System.out::println);\par
   \}\par
\}\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 10:52: import java.util.ArrayList;\par
import java.util.List;\par
public class JavaForEachListFilter \{\par
    public static void main(String[] args) \{\par
        List<String> items = new ArrayList<>();\par
\par
        items.add("coins");\par
        items.add("pens");\par
        items.add("keys");\par
        items.add("sheets");\par
        items.add("");\par
\par
        items.stream().filter(item ->!item.isEmpty()).forEach(System.out::println);\par
    \}\par
\}\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 10:53: import java.util.ArrayList;\par
import java.util.List;\par
public class JavaForEachListFilter \{\par
    public static void main(String[] args) \{\par
        List<String> items = new ArrayList<>();\par
\par
        items.add("coins");\par
        items.add("pens");\par
        items.add("keys");\par
        items.add("sheets");\par
        items.add("");\par
\par
        items.stream().filter(item -> (item.length() != 0)).forEach(System.out::println);\par
    \}\par
\}\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 10:53: 69886644\par
-1886321513\par
-1491291636\par
-321500747\par
-450432650\par
-456181846\par
758170412\par
988893715\par
1150168638\par
431151363\par
\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 10:54: -233779561\par
1269926866\par
-539906827\par
2015327366\par
813706574\par
1357878232\par
-40141269\par
-1917114273\par
-2053111016\par
-1001065122\par
\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 10:54: -263527169\par
-1736676760\par
-348196696\par
-1779704023\par
1432299512\par
297913390\par
-363715256\par
-205891276\par
653499724\par
1782275152\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 10:54: 1556075366\par
-1936599942\par
-1245799807\par
-2100684312\par
799141040\par
90496336\par
575736125\par
1097910639\par
-1397378695\par
-1360103723\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 10:54: 69886644\par
-1886321513\par
-1491291636\par
-321500747\par
-450432650\par
-456181846\par
758170412\par
988893715\par
1150168638\par
431151363\par
\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 10:54: -281787409\par
-746657685\par
1163972024\par
-928265773\par
630149658\par
1076570368\par
-185154739\par
-1162358143\par
358658930\par
-1400345555\par
\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 10:54: 69886644\par
-1886321513\par
-1491291636\par
-321500747\par
-450432650\par
-456181846\par
758170412\par
988893715\par
1150168638\par
431151363\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 10:54: -1862612627\par
-1335425283\par
26496550\par
1739436146\par
-1291607127\par
-2118479775\par
712243617\par
-2020032306\par
-1498125146\par
-2130749457\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 10:54: -1974217298\par
-922691355\par
1210316439\par
-301037176\par
-941193208\par
-924961964\par
-1214413611\par
-114598597\par
-2078993063\par
774839033\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 10:55: -2131819121\par
474602693\par
1913206602\par
1229367144\par
350655782\par
745379855\par
1810002113\par
1285532478\par
1279679683\par
-673461473\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 10:55: -281787409\par
-746657685\par
1163972024\par
-928265773\par
630149658\par
1076570368\par
-185154739\par
-1162358143\par
358658930\par
-1400345555\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 10:55: 260117128\par
-664535963\par
138959875\par
1966221957\par
269859861\par
1120944234\par
-1328806870\par
1846449476\par
1759457218\par
-3669180\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 10:55: -2131819121\par
474602693\par
1913206602\par
1229367144\par
350655782\par
745379855\par
1810002113\par
1285532478\par
1279679683\par
-673461473\par
\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 10:55: 1556075366\par
-1936599942\par
-1245799807\par
-2100684312\par
799141040\par
90496336\par
575736125\par
1097910639\par
-1397378695\par
-1360103723\par
\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 10:55: -2131819121\par
474602693\par
1913206602\par
1229367144\par
350655782\par
745379855\par
1810002113\par
1285532478\par
1279679683\par
-673461473\par
\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 10:55: -1553336248\par
10610930\par
-1259487037\par
2117166753\par
-488886725\par
-2034224379\par
1408407477\par
1068771553\par
712542948\par
-1516070220\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:58: import java.util.*; \par
public class Main \{ \par
\tab public static void main(String args[]) \{ \par
\tab\tab List<String> gadgets = new ArrayList<>(); \par
\tab\tab gadgets.add("SmartPh"); \par
\tab\tab gadgets.add("SmartWatch"); \par
\tab\tab gadgets.add("SmartTV"); \par
\tab\tab gadgets.add("iPhone"); \par
\tab\tab for (String gadget : gadgets) \{ \par
    \tab\tab System.out.println("processing: " + gadget);\par
\tab\tab\tab if (gadget.length() > 8) \{ \par
\tab\tab\tab\tab System.out.println("Prior ot Java 8: " + gadget); \par
\tab\tab\tab\tab break; \par
\tab\tab\} \tab\} \par
\tab\tab // using lambda expression and stream methods \par
\tab\tab String item = gadgets.stream() \par
\tab\tab\tab\tab .peek(s -> System.out.println("processing: " + s)) \par
\tab\tab\tab\tab .filter(s -> s.length() > 8) .findFirst().orElse(""); \par
\tab\tab System.out.println("In Java 8, first item: " + item); \par
\tab\tab\}\tab\}\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 10:59: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 10:59: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\par
\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 10:59: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 10:59: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 10:59: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 10:59: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\par
\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 10:59: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 10:59: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\par
\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 10:59: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\par
\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 10:59: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 10:59: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 10:59: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\par
\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 11:00: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\par
\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 11:00: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 11:00: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 11:00: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\par
\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 11:00: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 11:00: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\par
\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 11:00: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:01: import java.util.*; \par
public class Main \{ \par
\tab public static void main(String args[]) \{ \par
\tab\tab List<String> gadgets = new ArrayList<>(); \par
\tab\tab gadgets.add("SmartPh"); \par
\tab\tab gadgets.add("SmartWatch"); \par
\tab\tab gadgets.add("SmartTV"); \par
\tab\tab gadgets.add("iPhone"); \par
\tab\tab for (String gadget : gadgets) \{ \par
    \tab\tab System.out.println("processing: " + gadget);\par
\tab\tab\tab if (gadget.length() > 8) \{ \par
\tab\tab\tab\tab System.out.println("Prior ot Java 8: " + gadget); \par
\tab\tab\tab\tab break; \par
\tab\tab\} \tab\} \par
\tab\tab // using lambda expression and stream methods \par
\tab\tab String item = gadgets.stream() \par
\tab\tab\tab\tab .peek(s -> System.out.println("processing: " + s)) \par
\tab\tab\tab\tab .filter(s -> s.length() > 8) .findAny().orElse(""); \par
\tab\tab System.out.println("In Java 8, first item: " + item); \par
\tab\tab\}\tab\}\par
\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 11:02: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\par
\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 11:02: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\par
\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 11:02: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 11:02: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 11:02: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\par
\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 11:02: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 11:02: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\par
\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 11:02: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 11:02: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 11:02: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\par
\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 11:02: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 11:02: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\par
\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 11:02: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 11:02: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\par
\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 11:03: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 11:03: processing: SmartPh\par
processing: SmartWatch\par
Prior ot Java 8: SmartWatch\par
processing: SmartPh\par
processing: SmartWatch\par
In Java 8, first item: SmartWatch\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:07: import java.util.stream.*;\par
import java.util.*;\par
import java.util.function.*;\par
public class SimpleStream2 \{\par
   public static void main(String args[]) \{\par
   List<String> list = Arrays.asList("Java", "is", "not", "great");\par
Optional<String> result = list.stream()\par
    .filter(item -> item.contains("n"))\par
    .findAny();\par
\par
System.out.println(result.get());\par
   \}\par
\}\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 11:07: not\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 11:07: not\par
\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 11:08: not\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 11:08: not\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 11:08: not\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 11:08: not\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 11:08: not\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 11:08: not\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 11:08: not\par
\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 11:08: not\par
\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 11:08: not\par
\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 11:08: not\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 11:08: not\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 11:08: not\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 11:08: not\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 11:08: not\par
\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 11:08: not\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 11:08: not\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:08: package a;\par
import java.util.stream.*;\par
import java.util.*;\par
import java.util.function.*;\par
\par
public class Test \{\par
\tab public static void main(String args[]) \{\par
\tab\tab List<String> list = Arrays.asList("Java", "is", "not", "great");\par
\tab\tab Optional<String> result = list.stream()\par
\tab\tab\tab\tab .filter(item -> item.contains("B")).findAny();\par
\tab\tab if(result.isPresent())\par
\tab\tab\tab System.out.println(result.get());\par
\tab\tab else\par
\tab\tab\tab System.out.println("Not Found");\par
\tab\}\par
\}\par
\par
\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 11:09: Not Found\par
\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 11:09: Not Found\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 11:09: Not Found\par
\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 11:09: Not Found\par
\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 11:09: Not Found\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 11:09: Not Found\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 11:09: Not Found\par
\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 11:09: Not Found\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 11:09: Not Found\par
\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 11:09: Not Found\par
\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 11:09: Not Found\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 11:09: Not Found\par
\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 11:10: Not Found\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 11:10: Not Found\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 11:10: Not Found\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 11:10: Not Found\cf2\par
\cf3\b Harshit Mimani (to Everyone)\b0 : \cf1 11:10: Not Found\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 11:10: Not Found\par
\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 11:10: Not found\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:11: package a;\par
import java.util.stream.*;\par
import java.util.*;\par
import java.util.function.*;\par
\par
public class Test \{\par
\tab public static void main(String args[]) \{\par
\tab\tab Random random = new Random();\par
\tab\tab random.ints().limit(10).sorted().forEach(System.out::println);\par
\par
\tab\}\par
\}\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 11:11: -1578069491\par
-1163596236\par
-1150560803\par
-1111446944\par
-307875909\par
40773386\par
125586028\par
926710115\par
1645760186\par
1977919470\par
\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 11:11: -1720539428\par
-1218485957\par
-1115026710\par
-366058056\par
385894831\par
433038234\par
753071171\par
1046188803\par
1101331632\par
1271468292\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 11:11: -2015533525\par
-1681929738\par
-1533339520\par
-1426570691\par
-1321065160\par
382695439\par
484933210\par
570490833\par
951337651\par
1576982117\par
\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 11:11: -1881980694\par
-1619317146\par
-1129955367\par
-1067500778\par
-865246342\par
56230244\par
76821615\par
610798156\par
769057520\par
2000148867\cf2\par
\cf3\b Harshit Mimani (to Everyone)\b0 : \cf1 11:11: -1881621642\par
-1146486900\par
-14815417\par
594410510\par
821551970\par
1251920560\par
1658285228\par
1776581279\par
2032080898\par
2142141396\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 11:11: -1419111674\par
-1180847959\par
-992987121\par
-842238966\par
-777332960\par
-220916667\par
268844978\par
966116228\par
1396290821\par
1812889918\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 11:11: -1180847959\par
-992987121\par
-842238966\par
-777332960\par
-220916667\par
268844978\par
966116228\par
1396290821\par
1812889918\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 11:12: -2030150515\par
-1651697701\par
-1613778030\par
-1377174502\par
-857867523\par
-494440050\par
-221733862\par
332693349\par
1585150896\par
1602091571\par
\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 11:12: -1419111674\par
-1180847959\par
-992987121\par
-842238966\par
-777332960\par
-220916667\par
268844978\par
966116228\par
1396290821\par
1812889918\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 11:12: -2132588842\par
-1550622859\par
-1066401395\par
-607279127\par
663826010\par
964085391\par
1141550778\par
1504688026\par
1837604546\par
2137388817\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 11:12: -1720539428\par
-1218485957\par
-1115026710\par
-366058056\par
385894831\par
433038234\par
753071171\par
1046188803\par
1101331632\par
1271468292\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 11:12: -1155367485\par
-943019771\par
-399039506\par
-248942329\par
-139277243\par
67737722\par
522086144\par
889704661\par
1183808988\par
1279006337\par
\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 11:12: -1999686399\par
-1874743775\par
-1845376620\par
-1533714366\par
-908385273\par
-719141116\par
163510992\par
1168364330\par
1411115327\par
1756050925\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 11:12: -2132588842\par
-1550622859\par
-1066401395\par
-607279127\par
663826010\par
964085391\par
1141550778\par
1504688026\par
1837604546\par
2137388817\par
\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 11:12: -929584566\par
-922356197\par
-458364685\par
-195363855\par
-140413220\par
-138866208\par
440342579\par
1164337169\par
1377930950\par
1485574313\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 11:12: -1705544543\par
-998699952\par
-883397304\par
-764156793\par
-520979148\par
137196841\par
174115834\par
1070678966\par
1813811259\par
1830936146\par
\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 11:12: -1550622859\par
-1066401395\par
-607279127\par
663826010\par
964085391\par
1141550778\par
1504688026\par
1837604546\par
2137388817\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 11:12: -1969074935\par
-1766087184\par
-1474139505\par
-231661775\par
20604689\par
136556714\par
292173076\par
315890149\par
969342071\par
1290647851\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:17: import java.util.Arrays;\par
import java.util.List;\par
import java.util.stream.Collectors;\par
public class Main \{\par
  public static void main(String[] args) \{\par
    List<String> numbers = Arrays.asList("1", "2", "3", "4", "5", "6");\par
    System.out.println("original list: " + numbers);\par
    List<Integer> even = numbers.stream().map(s -> Integer.valueOf(s))\par
           .filter(number -> number % 2 == 0).collect(Collectors.toList());\par
    System.out.println("processed list, only even numbers: " + even);\par
String even2 = numbers.stream().map(s -> Integer.valueOf(s))\par
           .filter(number -> number % 2 == 0).map(s->s.toString()).collect(Collectors.joining(", "));\par
    System.out.println("processed list, only even numbers: " + even2);\par
\par
  \}\par
\}\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 11:17: original list: [1, 2, 3, 4, 5, 6]\par
processed list, only even numbers: [2, 4, 6]\par
processed list, only even numbers: 2, 4, 6\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 11:17: original list: [1, 2, 3, 4, 5, 6]\par
processed list, only even numbers: [2, 4, 6]\par
processed list, only even numbers: 2, 4, 6\par
\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 11:17: original list: [1, 2, 3, 4, 5, 6]\par
processed list, only even numbers: [2, 4, 6]\par
processed list, only even numbers: 2, 4, 6\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 11:17: original list: [1, 2, 3, 4, 5, 6]\par
processed list, only even numbers: [2, 4, 6]\par
processed list, only even numbers: 2, 4, 6\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 11:17: original list: [1, 2, 3, 4, 5, 6]\par
processed list, only even numbers: [2, 4, 6]\par
processed list, only even numbers: 2, 4, 6\par
\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 11:17: original list: [1, 2, 3, 4, 5, 6]\par
processed list, only even numbers: [2, 4, 6]\par
processed list, only even numbers: 2, 4, 6\par
\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 11:17: original list: [1, 2, 3, 4, 5, 6]\par
processed list, only even numbers: [2, 4, 6]\par
processed list, only even numbers: 2, 4, 6\par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 11:18: original list: [1, 2, 3, 4, 5, 6]\par
processed list, only even numbers: [2, 4, 6]\par
processed list, only even numbers: 2, 4, 6\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 11:18: original list: [1, 2, 3, 4, 5, 6]\par
processed list, only even numbers: [2, 4, 6]\par
processed list, only even numbers: 2, 4, 6\par
\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 11:18: original list: [1, 2, 3, 4, 5, 6]\par
processed list, only even numbers: [2, 4, 6]\par
processed list, only even numbers: 2, 4, 6\par
\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 11:18: original list: [1, 2, 3, 4, 5, 6]\par
processed list, only even numbers: [2, 4, 6]\par
processed list, only even numbers: 2, 4, 6\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 11:18: original list: [1, 2, 3, 4, 5, 6]\par
processed list, only even numbers: [2, 4, 6]\par
processed list, only even numbers: 2, 4, 6\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 11:18: original list: [1, 2, 3, 4, 5, 6]\par
processed list, only even numbers: [2, 4, 6]\par
processed list, only even numbers: 2, 4, 6\par
\par
\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 11:18: original list: [1, 2, 3, 4, 5, 6]\par
processed list, only even numbers: [2, 4, 6]\par
processed list, only even numbers: 2, 4, 6\par
\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 11:18: original list: [1, 2, 3, 4, 5, 6]\par
processed list, only even numbers: [2, 4, 6]\par
processed list, only even numbers: 2, 4, 6\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 11:19: original list: [1, 2, 3, 4, 5, 6]\par
processed list, only even numbers: [2, 4, 6]\par
processed list, only even numbers: 2, 4, 6\par
\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 11:19: original list: [1, 2, 3, 4, 5, 6]\par
processed list, only even numbers: [2, 4, 6]\par
processed list, only even numbers: 2, 4, 6\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 11:19: original list: [1, 2, 3, 4, 5, 6]\par
processed list, only even numbers: [2, 4, 6]\par
processed list, only even numbers: 2, 4, 6\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 11:19: original list: [1, 2, 3, 4, 5, 6]\par
processed list, only even numbers: [2, 4, 6]\par
processed list, only even numbers: 2, 4, 6\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 11:20: original list: [1, 2, 3, 4, 5, 6]\par
processed list, only even numbers: [2, 4, 6]\par
processed list, only even numbers: 2, 4, 6\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:21: import java.util.DoubleSummaryStatistics;\par
import java.util.stream.DoubleStream;\par
public class SimpleStat \{\par
\tab public static void main(String[] args) \{\par
\tab\tab System.out.println("---DoubleSummaryStatistics---");\tab\tab\par
\tab\tab DoubleSummaryStatistics dstats = DoubleStream.of(5.33d,2.34d,5.32d,2.31d,3.51d).\par
\tab\tab\tab\tab collect(DoubleSummaryStatistics::new, DoubleSummaryStatistics::accept, DoubleSummaryStatistics::combine);\par
\tab\tab System.out.println("Max:"+dstats.getMax()+", Min:"+dstats.getMin());\par
\tab\tab System.out.println("Count:"+dstats.getCount()+", Sum:"+dstats.getSum());\par
\tab\tab System.out.println("Average:"+dstats.getAverage());\tab\par
\}\par
\}\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 11:22: ---DoubleSummaryStatistics---\par
Max:5.33, Min:2.31\par
Count:5, Sum:18.81\par
Average:3.7619999999999996\par
\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 11:22: ---DoubleSummaryStatistics---\par
Max:5.33, Min:2.31\par
Count:5, Sum:18.81\par
Average:3.7619999999999996\par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 11:22: ---DoubleSummaryStatistics---\par
Max:5.33, Min:2.31\par
Count:5, Sum:18.81\par
Average:3.7619999999999996\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 11:22: ---DoubleSummaryStatistics---\par
Max:5.33, Min:2.31\par
Count:5, Sum:18.81\par
Average:3.7619999999999996\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 11:22: ---DoubleSummaryStatistics---\par
Max:5.33, Min:2.31\par
Count:5, Sum:18.81\par
Average:3.7619999999999996\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 11:22: ---DoubleSummaryStatistics---\par
Max:5.33, Min:2.31\par
Count:5, Sum:18.81\par
Average:3.7619999999999996\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 11:22: ---DoubleSummaryStatistics---\par
Max:5.33, Min:2.31\par
Count:5, Sum:18.81\par
Average:3.7619999999999996\par
\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 11:22: ---DoubleSummaryStatistics---\par
Max:5.33, Min:2.31\par
Count:5, Sum:18.81\par
Average:3.7619999999999996\par
\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 11:23: ---DoubleSummaryStatistics---\par
Max:5.33, Min:2.31\par
Count:5, Sum:18.81\par
Average:3.7619999999999996\par
\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 11:23: ---DoubleSummaryStatistics---\par
Max:5.33, Min:2.31\par
Count:5, Sum:18.81\par
Average:3.7619999999999996\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 11:23: v---DoubleSummaryStatistics---\par
Max:5.33, Min:2.31\par
Count:5, Sum:18.81\par
Average:3.7619999999999996\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 11:23: ---DoubleSummaryStatistics---\par
Max:5.33, Min:2.31\par
Count:5, Sum:18.81\par
Average:3.7619999999999996\par
\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 11:23: ---DoubleSummaryStatistics---\par
Max:5.33, Min:2.31\par
Count:5, Sum:18.81\par
Average:3.7619999999999996\par
\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 11:23: v---DoubleSummaryStatistics---\par
Max:5.33, Min:2.31\par
Count:5, Sum:18.81\par
Average:3.7619999999999996\par
\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 11:23: ---DoubleSummaryStatistics---\par
Max:5.33, Min:2.31\par
Count:5, Sum:18.81\par
Average:3.7619999999999996\par
\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 11:23: ---DoubleSummaryStatistics---\par
Max:5.33, Min:2.31\par
Count:5, Sum:18.81\par
Average:3.7619999999999996\par
\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 11:23: ---DoubleSummaryStatistics---\par
Max:5.33, Min:2.31\par
Count:5, Sum:18.81\par
Average:3.7619999999999996\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 11:23: ---DoubleSummaryStatistics---\par
Max:5.33, Min:2.31\par
Count:5, Sum:18.81\par
Average:3.7619999999999996\par
\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 11:24: ---DoubleSummaryStatistics---\par
Max:5.33, Min:2.31\par
Count:5, Sum:18.81\par
Average:3.7619999999999996\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 11:24: collect(DoubleSummaryStatistics::new, DoubleSummaryStatistics::accept, DoubleSummaryStatistics::combine);\par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 11:24: Ma'am please explain this\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 11:26: Ma'am means new, accept and combine can be done at the same time?\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 11:27: Ok ma'am...got it now\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 11:27: Thanku ma'am\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 11:30: streams are lazy means?\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:48: package a;\par
\par
import java.util.stream.*;\par
import java.util.*;\par
import java.util.function.*;\par
\par
public class Test \{\par
\tab public static void main(String args[]) \{\par
\tab\tab Stream<String> words = Stream.of("lower", "case", "text");\par
\tab\tab words\par
\tab\tab\tab .peek(s -> System.out.println("Peek before map:" + s))\par
\tab\tab\tab .map(s -> s.toUpperCase())\par
\tab\tab\tab .peek(s -> System.out.println("Peek after map:" + s))\par
\tab\tab\tab .forEach(System.out::println);\par
\par
\tab\}\par
\}\par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 11:49: Peek before map:lower\par
Peek after map:LOWER\par
LOWER\par
Peek before map:case\par
Peek after map:CASE\par
CASE\par
Peek before map:text\par
Peek after map:TEXT\par
TEXT\par
\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 11:50: Peek before map:lower\par
Peek after map:LOWER\par
LOWER\par
Peek before map:case\par
Peek after map:CASE\par
CASE\par
Peek before map:text\par
Peek after map:TEXT\par
TEXT\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 11:50: Peek before map:lower\par
Peek after map:LOWER\par
LOWER\par
Peek before map:case\par
Peek after map:CASE\par
CASE\par
Peek before map:text\par
Peek after map:TEXT\par
TEXT\par
\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 11:50: Peek before map:lower\par
Peek after map:LOWER\par
LOWER\par
Peek before map:case\par
Peek after map:CASE\par
CASE\par
Peek before map:text\par
Peek after map:TEXT\par
TEXT\par
\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 11:50: Peek before map:lower\par
Peek after map:LOWER\par
LOWER\par
Peek before map:case\par
Peek after map:CASE\par
CASE\par
Peek before map:text\par
Peek after map:TEXT\par
TEXT\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 11:50: Peek before map:lower\par
Peek after map:LOWER\par
LOWER\par
Peek before map:case\par
Peek after map:CASE\par
CASE\par
Peek before map:text\par
Peek after map:TEXT\par
TEXT\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 11:50: Peek before map:lower\par
Peek after map:LOWER\par
LOWER\par
Peek before map:case\par
Peek after map:CASE\par
CASE\par
Peek before map:text\par
Peek after map:TEXT\par
TEXT\par
\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 11:50: Peek before map:lower\par
Peek after map:LOWER\par
LOWER\par
Peek before map:case\par
Peek after map:CASE\par
CASE\par
Peek before map:text\par
Peek after map:TEXT\par
TEXT\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 11:50: Peek before map:lower\par
Peek after map:LOWER\par
LOWER\par
Peek before map:case\par
Peek after map:CASE\par
CASE\par
Peek before map:text\par
Peek after map:TEXT\par
TEXT\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 11:50: Peek before map:lower\par
Peek after map:LOWER\par
LOWER\par
Peek before map:case\par
Peek after map:CASE\par
CASE\par
Peek before map:text\par
Peek after map:TEXT\par
TEXT\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 11:51: Peek before map:lower\par
Peek after map:LOWER\par
LOWER\par
Peek before map:case\par
Peek after map:CASE\par
CASE\par
Peek before map:text\par
Peek after map:TEXT\par
TEXT\par
\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 11:51: Peek before map:lower\par
Peek after map:LOWER\par
LOWER\par
Peek before map:case\par
Peek after map:CASE\par
CASE\par
Peek before map:text\par
Peek after map:TEXT\par
TEXT\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:52: package a;\par
\par
import java.util.stream.*;\par
import java.util.*;\par
import java.util.function.*;\par
\par
public class Test \{\par
\tab public static void main(String args[]) \{\par
\tab\tab Stream<String> words = Stream.of("lower", "case", "text");\par
\tab\tab List<String> str=words\par
\tab\tab\tab .peek(s -> System.out.println("Peek before map:" + s))\par
\tab\tab\tab .map(s -> s.toUpperCase())\par
\tab\tab\tab .peek(s -> System.out.println("Peek after map:" + s))\par
\tab\tab\tab .collect(Collectors.toList());\par
\tab\tab System.out.println(str);\par
\par
\tab\}\par
\}\par
\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 11:52: Peek before map:lower\par
Peek after map:LOWER\par
LOWER\par
Peek before map:case\par
Peek after map:CASE\par
CASE\par
Peek before map:text\par
Peek after map:TEXT\par
TEXT\par
\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 11:52: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
[LOWER, CASE, TEXT]\par
\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 11:52: Peek before map:lower\par
Peek after map:LOWER\par
LOWER\par
Peek before map:case\par
Peek after map:CASE\par
CASE\par
Peek before map:text\par
Peek after map:TEXT\par
TEXT\par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 11:52: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
[LOWER, CASE, TEXT]\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 11:52: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
[LOWER, CASE, TEXT]\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 11:52: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
[LOWER, CASE, TEXT]\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 11:53: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
[LOWER, CASE, TEXT]\par
\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 11:53: Peek before map:lower\par
Peek after map:LOWER\par
LOWER\par
Peek before map:case\par
Peek after map:CASE\par
CASE\par
Peek before map:text\par
Peek after map:TEXT\par
TEXT\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 11:53: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
[LOWER, CASE, TEXT]\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 11:53: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
[LOWER, CASE, TEXT]\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 11:53: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
[LOWER, CASE, TEXT]\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 11:53: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
[LOWER, CASE, TEXT]\par
\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 11:53: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
[LOWER, CASE, TEXT]\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 11:53: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
[LOWER, CASE, TEXT]\par
\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 11:54: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
[LOWER, CASE, TEXT]\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 11:54: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
[LOWER, CASE, TEXT]\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 11:54: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
[LOWER, CASE, TEXT]\par
\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 11:54: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
[LOWER, CASE, TEXT]\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 11:55: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
[LOWER, CASE, TEXT]\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:57: package a;\par
\par
import java.util.stream.*;\par
import java.util.*;\par
import java.util.function.*;\par
\par
public class Test \{\par
\tab public static void main(String args[]) \{\par
\tab\tab List<String> words = Arrays.asList("lower", "case", \par
\tab\tab\tab\tab "text","to","be","converted","to","its","uppercase");\par
\tab\tab List<String> str=words.stream()\par
\tab\tab\tab .peek(s -> System.out.println("Peek before map:" + s))\par
\tab\tab\tab .map(s -> s.toUpperCase())\par
\tab\tab\tab .peek(s -> System.out.println("Peek after map:" + s))\par
\tab\tab\tab .collect(Collectors.toList());\par
\tab\tab System.out.println(str);\par
\par
\tab\}\par
\}\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 11:58: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:be\par
Peek after map:BE\par
Peek before map:converted\par
Peek after map:CONVERTED\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:its\par
Peek after map:ITS\par
Peek before map:uppercase\par
Peek after map:UPPERCASE\par
[LOWER, CASE, TEXT, TO, BE, CONVERTED, TO, ITS, UPPERCASE]\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 11:58: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:be\par
Peek after map:BE\par
Peek before map:converted\par
Peek after map:CONVERTED\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:its\par
Peek after map:ITS\par
Peek before map:uppercase\par
Peek after map:UPPERCASE\par
[LOWER, CASE, TEXT, TO, BE, CONVERTED, TO, ITS, UPPERCASE]\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:58: package a;\par
\par
import java.util.stream.*;\par
import java.util.*;\par
import java.util.function.*;\par
\par
public class Test \{\par
\tab public static void main(String args[]) \{\par
\tab\tab List<String> words = Arrays.asList("lower", "case", \par
\tab\tab\tab\tab "text","to","be","converted","to","its","uppercase");\par
\tab\tab List<String> str=words.parallelStream()\par
\tab\tab\tab .peek(s -> System.out.println("Peek before map:" + s))\par
\tab\tab\tab .map(s -> s.toUpperCase())\par
\tab\tab\tab .peek(s -> System.out.println("Peek after map:" + s))\par
\tab\tab\tab .collect(Collectors.toList());\par
\tab\tab System.out.println(str);\par
\par
\tab\}\par
\}\par
\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 11:58: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:be\par
Peek after map:BE\par
Peek before map:converted\par
Peek after map:CONVERTED\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:its\par
Peek after map:ITS\par
Peek before map:uppercase\par
Peek after map:UPPERCASE\par
[LOWER, CASE, TEXT, TO, BE, CONVERTED, TO, ITS, UPPERCASE]\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 11:58: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:be\par
Peek after map:BE\par
Peek before map:converted\par
Peek after map:CONVERTED\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:its\par
Peek after map:ITS\par
Peek before map:uppercase\par
Peek after map:UPPERCASE\par
[LOWER, CASE, TEXT, TO, BE, CONVERTED, TO, ITS, UPPERCASE]\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 11:58: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:be\par
Peek after map:BE\par
Peek before map:converted\par
Peek after map:CONVERTED\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:its\par
Peek after map:ITS\par
Peek before map:uppercase\par
Peek after map:UPPERCASE\par
[LOWER, CASE, TEXT, TO, BE, CONVERTED, TO, ITS, UPPERCASE]\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 11:58: Peek before map:converted\par
Peek after map:CONVERTED\par
Peek before map:text\par
Peek after map:TEXT\par
Peek before map:its\par
Peek before map:be\par
Peek after map:BE\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:case\par
Peek after map:CASE\par
Peek after map:ITS\par
Peek before map:lower\par
Peek before map:uppercase\par
Peek after map:LOWER\par
Peek after map:UPPERCASE\par
Peek before map:to\par
Peek after map:TO\par
[LOWER, CASE, TEXT, TO, BE, CONVERTED, TO, ITS, UPPERCASE]\par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 11:58: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:be\par
Peek after map:BE\par
Peek before map:converted\par
Peek after map:CONVERTED\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:its\par
Peek after map:ITS\par
Peek before map:uppercase\par
Peek after map:UPPERCASE\par
[LOWER, CASE, TEXT, TO, BE, CONVERTED, TO, ITS, UPPERCASE]\par
\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 11:58: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:be\par
Peek after map:BE\par
Peek before map:converted\par
Peek after map:CONVERTED\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:its\par
Peek after map:ITS\par
Peek before map:uppercase\par
Peek after map:UPPERCASE\par
[LOWER, CASE, TEXT, TO, BE, CONVERTED, TO, ITS, UPPERCASE]\par
\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 11:59: Peek before map:converted\par
Peek after map:CONVERTED\par
Peek before map:text\par
Peek after map:TEXT\par
Peek before map:its\par
Peek after map:ITS\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:uppercase\par
Peek after map:UPPERCASE\par
Peek before map:case\par
Peek before map:to\par
Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:be\par
Peek after map:TO\par
Peek after map:CASE\par
Peek after map:BE\par
[LOWER, CASE, TEXT, TO, BE, CONVERTED, TO, ITS, UPPERCASE]\par
\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 11:59: Peek before map:converted\par
Peek after map:CONVERTED\par
Peek before map:be\par
Peek after map:BE\par
Peek before map:its\par
Peek after map:ITS\par
Peek before map:uppercase\par
Peek after map:UPPERCASE\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:text\par
Peek after map:TEXT\par
[LOWER, CASE, TEXT, TO, BE, CONVERTED, TO, ITS, UPPERCASE]\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 11:59: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:be\par
Peek after map:BE\par
Peek before map:converted\par
Peek after map:CONVERTED\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:its\par
Peek after map:ITS\par
Peek before map:uppercase\par
Peek after map:UPPERCASE\par
[LOWER, CASE, TEXT, TO, BE, CONVERTED, TO, ITS, UPPERCASE]\par
\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 11:59: Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:TEXT\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:be\par
Peek after map:BE\par
Peek before map:converted\par
Peek after map:CONVERTED\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:its\par
Peek after map:ITS\par
Peek before map:uppercase\par
Peek after map:UPPERCASE\par
[LOWER, CASE, TEXT, TO, BE, CONVERTED, TO, ITS, UPPERCASE]\par
\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 11:59: Peek before map:converted\par
Peek after map:CONVERTED\par
Peek before map:be\par
Peek after map:BE\par
Peek before map:its\par
Peek before map:case\par
Peek after map:CASE\par
Peek before map:text\par
Peek after map:ITS\par
Peek after map:TEXT\par
Peek before map:lower\par
Peek after map:LOWER\par
Peek before map:uppercase\par
Peek after map:UPPERCASE\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:to\par
Peek after map:TO\par
[LOWER, CASE, TEXT, TO, BE, CONVERTED, TO, ITS, UPPERCASE]\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 11:59: Peek before map:converted\par
Peek before map:to\par
Peek after map:CONVERTED\par
Peek after map:TO\par
Peek before map:text\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:lower\par
Peek before map:uppercase\par
Peek after map:TEXT\par
Peek after map:UPPERCASE\par
Peek after map:LOWER\par
Peek before map:its\par
Peek before map:be\par
Peek after map:ITS\par
Peek after map:BE\par
Peek before map:case\par
Peek after map:CASE\par
[LOWER, CASE, TEXT, TO, BE, CONVERTED, TO, ITS, UPPERCASE]\par
\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 12:00: Peek before map:converted\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:uppercase\par
Peek before map:text\par
Peek before map:be\par
Peek after map:CONVERTED\par
Peek before map:lower\par
Peek after map:BE\par
Peek before map:to\par
Peek after map:TEXT\par
Peek after map:UPPERCASE\par
Peek before map:its\par
Peek before map:case\par
Peek after map:ITS\par
Peek after map:TO\par
Peek after map:LOWER\par
Peek after map:CASE\par
[LOWER, CASE, TEXT, TO, BE, CONVERTED, TO, ITS, UPPERCASE]\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 12:01: Peek before map:converted\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:uppercase\par
Peek before map:text\par
Peek before map:be\par
Peek after map:CONVERTED\par
Peek before map:lower\par
Peek after map:BE\par
Peek before map:to\par
Peek after map:TEXT\par
Peek after map:UPPERCASE\par
Peek before map:its\par
Peek before map:case\par
Peek after map:ITS\par
Peek after map:TO\par
Peek after map:LOWER\par
Peek after map:CASE\par
[LOWER, CASE, TEXT, TO, BE, CONVERTED, TO, ITS, UPPERCASE]\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 12:02: Use Stream Operations to check the pairs of \ldblquote\{\ldblquote  to \ldblquote\}\rdblquote , \ldblquote (\ldblquote  to \ldblquote )\rdblquote , \ldblquote <\ldblquote  to \ldblquote >\rdblquote , \ldblquote [\ldblquote  to \ldblquote ]\rdblquote  from the string.\par
Keep a count of all the keywords in java in the String.\par
The String is a normal String like:\par
\cf0\ldblquote import java.util.*;\par
import java.util.function.*;\par
 public class SimpleForEach \{\par
     public static void main(String[] args) \{\par
        Random random = new Random();\par
random.ints().limit(10).sorted().forEach(System.out::println);\par
\}\par
\}\rdblquote\par
\par
\par
\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 12:04: Peek before map:converted\par
Peek before map:to\par
Peek after map:TO\par
Peek before map:uppercase\par
Peek before map:text\par
Peek before map:be\par
Peek after map:CONVERTED\par
Peek before map:lower\par
Peek after map:BE\par
Peek before map:to\par
Peek after map:TEXT\par
Peek after map:UPPERCASE\par
Peek before map:its\par
Peek before map:case\par
Peek after map:ITS\par
Peek after map:TO\par
Peek after map:LOWER\par
Peek after map:CASE\par
[LOWER, CASE, TEXT, TO, BE, CONVERTED, TO, ITS, UPPERCASE]\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 12:26: Use Stream Operations to check the pairs of \ldblquote\{\ldblquote  to \ldblquote\}\rdblquote , \ldblquote (\ldblquote  to \ldblquote )\rdblquote , \ldblquote <\ldblquote  to \ldblquote >\rdblquote , \ldblquote [\ldblquote  to \ldblquote ]\rdblquote  from the string.\par
Keep a count of all the keywords in java in the String.\par
The String is a normal String like:\par
\cf0\ldblquote import java.util.*;\par
import java.util.function.*;\par
 public class SimpleForEach \{\par
     public static void main(String[] args) \{\par
        Random random = new Random();\par
random.ints().limit(10).sorted().forEach(System.out::println);\par
\}\par
\}\rdblquote\par
\par
Output: either \ldblquote Compiled successfully\rdblquote  or \ldblquote Brackets mismatch\rdblquote\par
Based on mapped pair of stack size.\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 12:27: 2 min break\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 12:32: Jenkov\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 12:32: Blogs\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 12:54: can syntax error be handled?\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 13:01: Ma'am,For every exception does a separate catch block needs to be defined?\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 13:02: Okay Ma'am\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 13:03: Thanku ma'am\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 13:03: Thanku mam\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 13:03: Thank you ma'am\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 13:03: Thank you maam\cf2\par
\cf3\b Harthik PS (to Everyone)\b0 : \cf1 13:03: Thank you ma'am\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 13:03: Thank you maam\par
\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 13:03: thank u mam\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 13:03: thanku ma'am\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 13:03: Thanku Ma'am\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 13:03: thank u ma'am\par
\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 13:03: Thank you ma'am\par
\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 13:03: thank you maam\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 13:03: Thank you mam\cf0\par
}
 