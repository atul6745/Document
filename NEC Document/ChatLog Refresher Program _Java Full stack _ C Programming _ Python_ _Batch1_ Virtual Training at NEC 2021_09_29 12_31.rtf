{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fcharset0 Segoe UI;}}
{\colortbl ;\red0\green0\blue0;\red255\green255\blue255;\red59\green182\blue60;\red182\green59\blue60;}
\viewkind4\uc1\pard\cf1\b\f0\fs24 Chat Log   C:\\Users\\acer\\Documents\\ChatLog Refresher Program _Java Full stack _ C Programming _ Python_ _Batch1_ Virtual Training at NEC 2021_09_29 12_31.rtf\b0\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:23: public interface Animal \{\par
    public void eat();\par
    public void move();\par
    public void sleep();\par
\}\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:24: public abstract class Mammal implements Animal \{\par
    public void eat() \{\par
        System.out.println("Eating...");\par
    \}\par
     public void move() \{\par
        System.out.println("Moving...");\par
    \}\par
     public void sleep() \{\par
        System.out.println("Sleeping...");\par
    \}\par
 \}\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:26: public class Dog extends Mammal \{\par
    public void bark() \{\par
        System.out.println("Gow gow!");\par
    \}\par
    public void eat() \{\par
        System.out.println("Dog is eating...");\par
    \}\par
\}\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:26: public class Cat extends Mammal \{\par
    public void meow() \{\par
        System.out.println("Meow Meow!");\par
    \}\par
\}\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:27: public class MainClass \{   \par
   public static void main(String args[]) \{\par
       Dog dog = new Dog();\par
       Mammal anim1 = (Mammal) dog;\par
       anim1.eat(); //Dog is eating\'85\par
      \par
       Mammal anim2 = new Cat();\par
      Cat cat = (Cat) anim2;\par
      anim2.eat(); //Eating\'85\par
      cat.meow(); //Meow Meow!\par
   \}\par
\}\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:33: public class MainClass \{   \par
   public static void main(String args[]) \{\par
       Dog dog = new Dog();\par
       Mammal anim1 = (Mammal) dog;\par
       anim1.eat(); //Dog is eating\'85\par
      \par
       Mammal anim2 = new Cat(); //cat was upcasted it to anim2\par
      Cat cat = (Cat) anim2;     //anim2 is downcasted to cat \par
      anim2.eat(); //Eating\'85\par
      //anim2.meow();\par
      cat.eat();//\par
      cat.meow(); //Meow Meow!\par
   \}\par
\}\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:34: class AnimalTrainer \{\par
    public void teach(Mammal anim) \{ //upcasting\par
        // do animal-things\par
        anim.move();\par
        anim.eat();\par
 \par
        // if there's a dog, tell it barks\par
        if (anim instanceof Dog) \{\par
            Dog dog = (Dog) anim;    //Downcasting\par
            dog.bark();\par
        \}\par
        if (anim instanceof Cat) \{\par
            Cat cat = (Cat) anim;     //Downcasting\par
            cat.meow();\par
        \}\par
    \}\par
\}\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 09:35: Dog is eating...\par
Eating...\par
Meow Meow!\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 09:35: Dog is eating...\par
Eating...\par
Meow Meow!\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 09:35: Dog is eating...\par
Eating...\par
Meow Meow!\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:35: Dog is eating...\par
Eating...\par
Eating...\par
Meow Meow!\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 09:35: Dog is eating...\par
Eating...\par
Eating...\par
Meow Meow!\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 09:35: Dog is eating...\par
Eating...\par
Meow Meow!\par
\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 09:35: Dog is eating...\par
Eating...\par
Meow Meow!\par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 09:35: Dog is eating...\par
Eating...\par
Meow Meow!\par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 09:36: Dog is eating...\par
Eating...\par
Eating...\par
Meow Meow!\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:36: public class MainClass \{   \par
   public static void main(String args[]) \{\par
       Dog dog = new Dog();\par
       Cat cat = new Cat();\par
 \par
       AnimalTrainer trainer = new AnimalTrainer();\par
       trainer.teach(dog);\par
       trainer.teach(cat);\par
   \}\par
\}\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 09:36: Dog is eating...\par
Eating...\par
Meow Meow!\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 09:36: Dog is eating...\par
Eating...\par
Meow Meow!\par
\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 09:36: Dog is eating...\par
Eating...\par
Eating...\par
Meow Meow!\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 09:36: Dog is eating...\par
Eating...\par
Meow Meow!\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 09:36: Dog is eating...\par
Eating...\par
Meow Meow!\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 09:37: Dog is eating...\par
Eating...\par
Meow Meow!\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 09:37: Moving...\par
Dog is eating...\par
Gow gow!\par
Moving...\par
Eating...\par
Meow Meow!\par
\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 09:37: Moving...\par
Dog is eating...\par
Gow gow!\par
Moving...\par
Eating...\par
Meow Meow!\par
\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 09:37: Moving...\par
Dog is eating...\par
Gow gow!\par
Moving...\par
Eating...\par
Meow Meow!\par
\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 09:37: Moving...\par
Dog is eating...\par
Gow gow!\par
Moving...\par
Eating...\par
Meow Meow!\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 09:37: Moving...\par
Dog is eating...\par
Gow gow!\par
Moving...\par
Eating...\par
Meow Meow!\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 09:37: Moving...\par
Dog is eating...\par
Gow gow!\par
Moving...\par
Eating...\par
Meow Meow!\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 09:37: Moving...\par
Dog is eating...\par
Gow gow!\par
Moving...\par
Eating...\par
Meow Meow!\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 09:37: Moving...\par
Dog is eating...\par
Gow gow!\par
Moving...\par
Eating...\par
Meow Meow!\par
\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 09:37: Moving...\par
Dog is eating...\par
Gow gow!\par
Moving...\par
Eating...\par
Meow Meow!\par
\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 09:38: Moving...\par
Dog is eating...\par
Gow gow!\par
Moving...\par
Eating...\par
Meow Meow!\par
\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 09:38: package ppt;\par
class parent\{\par
\tab void show() \{\par
\tab\tab System.out.println("parent");\par
\tab\}\par
\}\par
class child extends parent\{\par
\tab void show() \{\par
\tab\tab System.out.println("child");\par
\tab\}\par
\tab void show_child() \{\par
\tab\tab System.out.println("child class unique method");\par
\tab\}\par
\}\par
public class DowncastingEx \{\par
\tab public static void main(String[] args) \{\par
\tab\tab parent obj1 = new child();\par
\tab\tab child obj2 = (child) obj1;\par
\tab\tab obj2.show();\par
\tab\tab\par
\tab\tab\par
\par
\tab\}\par
\par
\}\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 09:38: Moving...\par
Dog is eating...\par
Gow gow!\par
Moving...\par
Eating...\par
Meow Meow!\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 09:38: Dog is eating...\par
Eating...\par
Meow Meow!\par
Moving...\par
Dog is eating...\par
Gow gow!\par
Moving...\par
Eating...\par
Meow Meow!\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 09:39: Dog is eating...\par
Eating...\par
Meow Meow!\par
\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 09:40: Moving...\par
Dog is eating...\par
Gow gow!\par
Moving...\par
Eating...\par
Meow Meow!\par
\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 09:41: Dog is eating...\par
Eating...\par
Meow Meow!\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 09:41: Moving...\par
Dog is eating...\par
Gow gow!\par
Moving...\par
Eating...\par
Meow Meow!\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 09:42: Dog is eating...\par
Eating...\par
Meow Meow!\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 09:42: Moving...\par
Dog is eating...\par
Gow gow!\par
Moving...\par
Eating...\par
Meow Meow!\par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 09:42: Moving...\par
Dog is eating...\par
Gow gow!\par
Moving...\par
Eating...\par
Meow Meow!\par
\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 09:42: Moving...\par
Dog is eating...\par
Gow gow!\par
Moving...\par
Eating...\par
Meow Meow!\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 09:43: Moving...\par
Dog is eating...\par
Gow gow!\par
Moving...\par
Eating...\par
Meow Meow!\cf2\par
\cf3\b Saloni Dhawan (to Everyone)\b0 : \cf1 09:43: Moving...\par
Dog is eating...\par
Gow gow!\par
Moving...\par
Eating...\par
Meow Meow!\par
\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 09:45: Moving...\par
Dog is eating...\par
Gow gow!\par
Moving...\par
Eating...\par
Meow Meow\cf2\par
\cf3\b yashas anand (to Everyone)\b0 : \cf1 09:46: Moving...\par
Dog is eating...\par
Gow gow!\par
Moving...\par
Eating...\par
Meow Meow\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:51: Create a list(Vector) of Employees. Add some employees to the list. Print the list of employees every time a new employee is added. \par
Sysout(emps) ; emps is the list object.\par
Add at least 5 employees.\par
Employee is a class: (Emp_id, name, Sal, address)\par
List<Employee> emps \'85; emps is a vector\par
Hint: override toString() in Employee\par
\cf2\par
\cf4\b Atul Gupta (to Monica)\b0 : \cf1 10:14: import java.util.Iterator;\par
import java.util.Vector;\par
\par
class Employee \{\par
\tab private int id;\par
\tab private String name;\par
\tab private String add;\par
\tab private int sal;\par
\tab\par
\tab public Employee(int id, String name,int sal,String add) \{\par
\tab\par
\tab\tab this.id=id;\par
\tab\tab this.name=name;\par
\tab\tab this.sal=sal;\par
\tab\tab this.add=add;\par
\tab\par
\tab\}\tab\par
\tab public String toString() \{\par
\tab\tab return "Emp_Details [id="+ id +",name="+name+ ",address="+add+",salary="+sal +"]";\par
\tab\}\par
\}\par
\par
public class Main \{\par
    public static void main(String[] args) \{\par
\tab\tab Vector<Employee> list = new Vector<>();\par
\tab\tab list.add(new Employee(10023, "Atul", 2000000,"Kanpur"));\par
\tab\tab list.add(new Employee(1024, "Aman", 300000,"Lucknow"));\par
\tab\tab list.add(new Employee(1025, "Mayank",250000,"Gorakhpur"));\par
\tab\tab list.add(new Employee(10026, "Saurabh",400000,"Noida"));\par
\tab\tab Iterator<Employee> iter = list.iterator();\par
\tab\tab while (iter.hasNext()) \par
\tab\tab\tab System.out.println(iter.next());\par
\tab\tab\}\par
\}\cf2\par
\cf4\b Atul Gupta (to Monica)\b0 : \cf1 10:15: Emp_Details [id=10023,name=Atul,address=Kanpur,salary=2000000]\par
Emp_Details [id=1024,name=Aman,address=Lucknow,salary=300000]\par
Emp_Details [id=1025,name=Mayank,address=Gorakhpur,salary=250000]\par
Emp_Details [id=10026,name=Saurabh,address=Noida,salary=400000]\par
\cf2\par
\cf4\b Atul Gupta (to Monica)\b0 : \cf1 10:26: import java.util.Iterator;\par
import java.util.Vector;\par
\par
class Employee \{\par
\tab private int id;\par
\tab private String name;\par
\tab private String add;\par
\tab private int sal;\par
\tab\par
\tab public Employee(int id, String name,int sal,String add) \{\par
\tab\tab super();\par
\tab\tab this.id=id;\par
\tab\tab this.name=name;\par
\tab\tab this.sal=sal;\par
\tab\tab this.add=add;\par
\tab\par
\tab\}\tab\par
\tab public String toString() \{\par
\tab\tab return "Emp_Details [id="+ id +",name="+name+ ",address="+add+",salary="+sal +"]";\par
\tab\}\par
\}\par
\par
public class Main \{\par
    public static void main(String[] args) \{\par
\tab\tab Vector<Employee> list = new Vector<>();\par
\tab\tab list.add(new Employee(10023, "Atul", 2000000,"Kanpur"));\par
\tab\tab System.out.print(list);\par
\tab\tab list.add(new Employee(1024, "Aman", 300000,"Lucknow"));\par
\tab\tab System.out.print(list);\par
\tab\tab list.add(new Employee(1025, "Mayank",250000,"Gorakhpur"));\par
\tab\tab System.out.print(list);\par
\tab\tab list.add(new Employee(10026, "Saurabh",400000,"Noida"));\par
\tab\tab System.out.print(list);\par
// \tab\tab Iterator<Employee> iter = list.iterator();\par
// \tab\tab while (iter.hasNext()) \par
// \tab\tab\tab System.out.println(iter.next());\par
\tab\tab\}\par
\}\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:30: tea break 20 min\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:32: Break \cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 10:49: Back\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 10:51: Back\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 10:51: back\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 10:51: Back\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 10:51: back\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 10:51: back\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 10:51: back\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 10:52: back\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 10:52: Back\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 10:52: back\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 10:52: back\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 10:53: back\cf2\par
\cf3\b MAYANK KUMAR (to Everyone)\b0 : \cf1 10:53: back\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 10:53: back\cf2\par
\cf3\b Saloni Dhawan (to Everyone)\b0 : \cf1 10:54: back\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 10:54: back\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 10:59: Mam my eclipse idle is working now on jdk16\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 11:02: I have downloaded eclipse.exe file\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 11:02: then run the file\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 11:03: and its working\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 11:04: import java.util.*;\par
public class Employee\{\par
\tab\tab int Emp_id,sal;\par
\tab     String name,add;\par
\tab     Employee(int eid, String n, int s, String ad)\{\par
\tab     \tab this.Emp_id=eid;\par
\tab     \tab this.name=n;\par
\tab     \tab this.sal=s;\par
\tab     \tab this.add=ad;\par
\tab     \}\par
\tab     public String toString() \{\par
\tab\tab\tab return "Name="+ name +",Id="+Emp_id+ ",Address="+add+",Salary="+sal +")";\par
\tab\tab\}\par
\tab\tab public static void main(String args[]) \{\par
\tab\tab\tab Scanner sc=new Scanner(System.in);\par
\tab\tab\tab Vector<Employee> emp=new Vector<>();\par
\tab\tab\tab for(int i=0;i<5;i++) \{\par
\tab\tab\tab\tab System.out.println("Enter details of Employee : ");\par
\tab\tab\tab\tab int eid=sc.nextInt();\par
\tab\tab\tab\tab sc.nextLine();\par
\tab\tab\tab\tab String n=sc.nextLine();\par
\tab\tab\tab\tab int sal=sc.nextInt();\par
\tab\tab\tab\tab sc.nextLine();\par
\tab\tab\tab\tab String ad=sc.nextLine();\par
\tab\tab\tab\tab emp.add(new Employee(eid,n,sal,ad)); \par
\tab\tab\tab\tab System.out.println("Current Employee detais :- ");\par
\tab\tab\tab\tab System.out.println(emp);\par
\tab\tab\}\par
\tab\}\par
\}\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:09: import java.util.Iterator; \par
import java.util.LinkedList; \par
import java.util.Queue; \par
public class QueueExample \{ \par
public static void main(String[] args) \{ \par
Queue<String> qe=new LinkedList<String>(); \par
qe.add("b"); qe.add("a"); qe.add("c"); \par
qe.add("e"); qe.add("d"); \par
Iterator it=qe.iterator(); \par
System.out.println("Initial Size of Queue :"+qe.size());\par
while(it.hasNext()) \{ \par
String iteratorValue=(String)it.next(); \par
System.out.println("Queue Next Value :"+iteratorValue); \} \par
System.out.println("Queue peek :"+qe.peek()); // get value and does not remove element from queue  \par
System.out.println("Queue poll :"+qe.poll()); // get first value and remove that object from queue \par
System.out.println("Final Size of Queue :"+qe.size()); \par
\} \cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 11:11: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 11:11: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 11:11: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 11:11: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 11:11: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\par
\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 11:11: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 11:12: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 11:12: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 11:12: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 11:12: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:12: import java.util.Iterator;\par
import java.util.LinkedList;\par
import java.util.Queue;\par
\par
public class JavaExample \{\par
\tab public static void main(String[] args) \{\par
\tab\tab Queue<String> qe = new LinkedList<String>();\par
\tab\tab qe.add("b");\par
\tab\tab qe.add("a");\par
\tab\tab qe.add("c");\par
\tab\tab qe.add("e");\par
\tab\tab qe.add("d");\par
\tab\tab Iterator<String> it = qe.iterator();\par
\tab\tab System.out.println("Initial Size of Queue :" + qe.size());\par
\tab\tab while (it.hasNext()) \{\par
\tab\tab\tab String iteratorValue = (String) it.next();\par
\tab\tab\tab System.out.println("Queue Next Value :" + iteratorValue);\par
\tab\tab\}\par
\tab\tab System.out.println("Queue peek :" + qe.peek()); // get value and does not remove element from queue\par
\tab\tab System.out.println("Queue poll :" + qe.poll()); // get first value and remove that object from queue\par
\tab\tab System.out.println("Final Size of Queue :" + qe.size());\par
\tab\}\par
\}\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 11:12: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\par
\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 11:12: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 11:12: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\par
\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 11:12: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\par
\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 11:13: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 11:13: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\par
\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 11:13: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\par
\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 11:13: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\cf2\par
\cf3\b MAYANK KUMAR (to Everyone)\b0 : \cf1 11:13: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:13: System.out.println("The Queue now is: "+ qe);\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 11:13: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\par
The Queue now is:[a, c, e, d]\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 11:14: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\par
[a, c, e, d]\par
\cf2\par
\cf3\b Saloni Dhawan (to Everyone)\b0 : \cf1 11:14: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 11:14: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\par
\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 11:14: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\par
The Queue now is:[a, c, e, d]\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 11:14: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\par
The Queue now is: [a, c, e, d]\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 11:14: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\par
The Queue now is: [a, c, e, d]\par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 11:14: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\par
The Queue now is: [a, c, e, d]\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 11:14: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\par
[a, c, e, d]\cf2\par
\cf3\b yashas anand (to Everyone)\b0 : \cf1 11:19: Initial Size of Queue :5\par
Queue Next Value :b\par
Queue Next Value :a\par
Queue Next Value :c\par
Queue Next Value :e\par
Queue Next Value :d\par
Queue peek :b\par
Queue poll :b\par
Final Size of Queue :4\par
[a, c, e, d]\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:23: import java.util.*;\par
\par
public class MainClass \{\par
\tab static void showpush(Stack<Integer> st, int a) \{\par
\tab\tab st.push(a);\par
\tab\tab System.out.println("push(" + a + ")");\par
\tab\tab System.out.println("stack: " + st);\par
\tab\}\par
\par
\tab static void showpop(Stack<Integer> st) \{\par
\tab\tab System.out.print("pop -> ");\par
\tab\tab Integer a = (Integer) st.pop();\par
\tab\tab System.out.println(a);\par
\tab\tab System.out.println("stack: " + st);\par
\tab\}\par
\par
\tab public static void main(String args[]) \{\par
\tab\tab Stack<Integer> st = new Stack<>();\par
\tab\tab System.out.println("stack: " + st);\par
\tab\tab showpush(st, 42);\par
\tab\tab showpush(st, 66);\par
\tab\tab showpush(st, 99);\par
\tab\tab showpop(st);\par
\tab\tab showpop(st);\par
\tab\tab showpop(st);\par
\tab\}\par
\}\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 11:24: stack: []\par
push(42)\par
stack: [42]\par
push(66)\par
stack: [42, 66]\par
push(99)\par
stack: [42, 66, 99]\par
pop -> 99\par
stack: [42, 66]\par
pop -> 66\par
stack: [42]\par
pop -> 42\par
stack: []\cf2\par
\cf3\b MAYANK KUMAR (to Everyone)\b0 : \cf1 11:24: stack: []\par
push(42)\par
stack: [42]\par
push(66)\par
stack: [42, 66]\par
push(99)\par
stack: [42, 66, 99]\par
pop -> 99\par
stack: [42, 66]\par
pop -> 66\par
stack: [42]\par
pop -> 42\par
stack: []\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 11:24: stack: []\par
push(42)\par
stack: [42]\par
push(66)\par
stack: [42, 66]\par
push(99)\par
stack: [42, 66, 99]\par
pop -> 99\par
stack: [42, 66]\par
pop -> 66\par
stack: [42]\par
pop -> 42\par
stack: []\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 11:24: stack: []\par
push(42)\par
stack: [42]\par
push(66)\par
stack: [42, 66]\par
push(99)\par
stack: [42, 66, 99]\par
pop -> 99\par
stack: [42, 66]\par
pop -> 66\par
stack: [42]\par
pop -> 42\par
stack: []\par
\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 11:24: stack: []\par
push(42)\par
stack: [42]\par
push(66)\par
stack: [42, 66]\par
push(99)\par
stack: [42, 66, 99]\par
pop -> 99\par
stack: [42, 66]\par
pop -> 66\par
stack: [42]\par
pop -> 42\par
stack: []\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 11:24: stack: []\par
push(42)\par
stack: [42]\par
push(66)\par
stack: [42, 66]\par
push(99)\par
stack: [42, 66, 99]\par
pop -> 99\par
stack: [42, 66]\par
pop -> 66\par
stack: [42]\par
pop -> 42\par
stack: []\par
\cf2\par
\cf3\b Harshit Mimani (to Everyone)\b0 : \cf1 11:24: stack: []\par
push(42)\par
stack: [42]\par
push(66)\par
stack: [42, 66]\par
push(99)\par
stack: [42, 66, 99]\par
pop -> 99\par
stack: [42, 66]\par
pop -> 66\par
stack: [42]\par
pop -> 42\par
stack: []\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 11:25: stack: []\par
push(42)\par
stack: [42]\par
push(66)\par
stack: [42, 66]\par
push(99)\par
stack: [42, 66, 99]\par
pop -> 99\par
stack: [42, 66]\par
pop -> 66\par
stack: [42]\par
pop -> 42\par
stack: []\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 11:25: stack: []\par
push(42)\par
stack: [42]\par
push(66)\par
stack: [42, 66]\par
push(99)\par
stack: [42, 66, 99]\par
pop -> 99\par
stack: [42, 66]\par
pop -> 66\par
stack: [42]\par
pop -> 42\par
stack: []\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 11:25: stack: []\par
push(42)\par
stack: [42]\par
push(66)\par
stack: [42, 66]\par
push(99)\par
stack: [42, 66, 99]\par
pop -> 99\par
stack: [42, 66]\par
pop -> 66\par
stack: [42]\par
pop -> 42\par
stack: []\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 11:25: stack: []\par
push(42)\par
stack: [42]\par
push(66)\par
stack: [42, 66]\par
push(99)\par
stack: [42, 66, 99]\par
pop -> 99\par
stack: [42, 66]\par
pop -> 66\par
stack: [42]\par
pop -> 42\par
stack: []\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 11:25: stack: []\par
push(42)\par
stack: [42]\par
push(66)\par
stack: [42, 66]\par
push(99)\par
stack: [42, 66, 99]\par
pop -> 99\par
stack: [42, 66]\par
pop -> 66\par
stack: [42]\par
pop -> 42\par
stack: []\par
\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 11:25: stack: []\par
push(42)\par
stack: [42]\par
push(66)\par
stack: [42, 66]\par
push(99)\par
stack: [42, 66, 99]\par
pop -> 99\par
stack: [42, 66]\par
pop -> 66\par
stack: [42]\par
pop -> 42\par
stack: []\par
\cf2\par
\cf3\b Nagareddy Deepthi (to Everyone)\b0 : \cf1 11:25: stack: []\par
push(42)\par
stack: [42]\par
push(66)\par
stack: [42, 66]\par
push(99)\par
stack: [42, 66, 99]\par
pop -> 99\par
stack: [42, 66]\par
pop -> 66\par
stack: [42]\par
pop -> 42\par
stack: []\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 11:25: stack: []\par
push(42)\par
stack: [42]\par
push(66)\par
stack: [42, 66]\par
push(99)\par
stack: [42, 66, 99]\par
pop -> 99\par
stack: [42, 66]\par
pop -> 66\par
stack: [42]\par
pop -> 42\par
stack: []\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 11:25: stack: []\par
push(42)\par
stack: [42]\par
push(66)\par
stack: [42, 66]\par
push(99)\par
stack: [42, 66, 99]\par
pop -> 99\par
stack: [42, 66]\par
pop -> 66\par
stack: [42]\par
pop -> 42\par
stack: []\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 11:25: stack: []\par
\par
push(42)\par
\par
stack: [42]\par
\par
push(66)\par
\par
stack: [42, 66]\par
\par
push(99)\par
\par
stack: [42, 66, 99]\par
\par
pop -> 99\par
\par
stack: [42, 66]\par
\par
pop -> 66\par
\par
stack: [42]\par
\par
pop -> 42\par
\par
stack: []\par
\par
\par
\par
\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 11:25: stack: []\par
push(42)\par
stack: [42]\par
push(66)\par
stack: [42, 66]\par
push(99)\par
stack: [42, 66, 99]\par
pop -> 99\par
stack: [42, 66]\par
pop -> 66\par
stack: [42]\par
pop -> 42\par
stack: []\par
\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 11:25: stack: []\par
push(42)\par
stack: [42]\par
push(66)\par
stack: [42, 66]\par
push(99)\par
stack: [42, 66, 99]\par
pop -> 99\par
stack: [42, 66]\par
pop -> 66\par
stack: [42]\par
pop -> 42\par
stack: []\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 11:25: stack: []\par
push(42)\par
stack: [42]\par
push(66)\par
stack: [42, 66]\par
push(99)\par
stack: [42, 66, 99]\par
pop -> 99\par
stack: [42, 66]\par
pop -> 66\par
stack: [42]\par
pop -> 42\par
stack: []\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 11:25: stack: []\par
push(42)\par
stack: [42]\par
push(66)\par
stack: [42, 66]\par
push(99)\par
stack: [42, 66, 99]\par
pop -> 99\par
stack: [42, 66]\par
pop -> 66\par
stack: [42]\par
pop -> 42\par
stack: []\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 11:26: stack: []\par
push(42)\par
stack: [42]\par
push(66)\par
stack: [42, 66]\par
push(99)\par
stack: [42, 66, 99]\par
pop -> 99\par
stack: [42, 66]\par
pop -> 66\par
stack: [42]\par
pop -> 42\par
stack: []\par
\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 11:27: \par
\par
stack: []\par
push(42)\par
stack: [42]\par
push(66)\par
stack: [42, 66]\par
push(99)\par
stack: [42, 66, 99]\par
pop -> 99\par
stack: [42, 66]\par
pop -> 66\par
stack: [42]\par
pop -> 42\par
stack: []\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:27: import java.util.Stack;\par
public class StackExample \{\par
    public static void main(String[] args) \{\par
        // Creating a Stack\par
        Stack<String> stackOfCards = new Stack<>();\par
        // Pushing new items to the Stack\par
        stackOfCards.push("Jack");\par
        stackOfCards.push("Queen");\par
        stackOfCards.push("King");\par
        stackOfCards.push("Ace");\par
        System.out.println("Stack => " + stackOfCards);\par
        System.out.println();\par
        // Popping items from the Stack\par
        String cardAtTop = stackOfCards.pop();  //Throws EmptyStackException if the stack is empty\par
        System.out.println("Stack.pop() => " + cardAtTop);\par
        System.out.println("Current Stack => " + stackOfCards);\par
        System.out.println();\par
        // Get the item at the top of the stack without removing it\par
        cardAtTop = stackOfCards.peek();\par
        System.out.println("Stack.peek() => " + cardAtTop);\par
        System.out.println("Current Stack => " + stackOfCards);\par
    \}\par
\}\par
\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 11:28: Stack => [Jack, Queen, King, Ace]\par
\par
Stack.pop() => Ace\par
Current Stack => [Jack, Queen, King]\par
\par
Stack.peek() => King\par
Current Stack => [Jack, Queen, King]\par
\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 11:28: Stack => [Jack, Queen, King, Ace]\par
\par
Stack.pop() => Ace\par
Current Stack => [Jack, Queen, King]\par
\par
Stack.peek() => King\par
Current Stack => [Jack, Queen, King]\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 11:28: Stack => [Jack, Queen, King, Ace]\par
\par
Stack.pop() => Ace\par
Current Stack => [Jack, Queen, King]\par
\par
Stack.peek() => King\par
Current Stack => [Jack, Queen, King]\par
\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 11:28: Stack => [Jack, Queen, King, Ace]\par
\par
Stack.pop() => Ace\par
Current Stack => [Jack, Queen, King]\par
\par
Stack.peek() => King\par
Current Stack => [Jack, Queen, King]\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 11:28: Stack => [Jack, Queen, King, Ace]\par
\par
Stack.pop() => Ace\par
Current Stack => [Jack, Queen, King]\par
\par
Stack.peek() => King\par
Current Stack => [Jack, Queen, King]\cf2\par
\cf3\b MAYANK KUMAR (to Everyone)\b0 : \cf1 11:28: Stack => [Jack, Queen, King, Ace]\par
\par
Stack.pop() => Ace\par
Current Stack => [Jack, Queen, King]\par
\par
Stack.peek() => King\par
Current Stack => [Jack, Queen, King]\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 11:28: Stack => [Jack, Queen, King, Ace]\par
\par
Stack.pop() => Ace\par
Current Stack => [Jack, Queen, King]\par
\par
Stack.peek() => King\par
Current Stack => [Jack, Queen, King]\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 11:28: Stack => [Jack, Queen, King, Ace]\par
\par
Stack.pop() => Ace\par
Current Stack => [Jack, Queen, King]\par
\par
Stack.peek() => King\par
Current Stack => [Jack, Queen, King]\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 11:28: Stack => [Jack, Queen, King, Ace]\par
\par
Stack.pop() => Ace\par
Current Stack => [Jack, Queen, King]\par
\par
Stack.peek() => King\par
Current Stack => [Jack, Queen, King]\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 11:28: Stack => [Jack, Queen, King, Ace]\par
\par
Stack.pop() => Ace\par
Current Stack => [Jack, Queen, King]\par
\par
Stack.peek() => King\par
Current Stack => [Jack, Queen, King]\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 11:28: Stack => [Jack, Queen, King, Ace]\par
\par
Stack.pop() => Ace\par
Current Stack => [Jack, Queen, King]\par
\par
Stack.peek() => King\par
Current Stack => [Jack, Queen, King]\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 11:28: Stack => [Jack, Queen, King, Ace]\par
\par
Stack.pop() => Ace\par
Current Stack => [Jack, Queen, King]\par
\par
Stack.peek() => King\par
Current Stack => [Jack, Queen, King]\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 11:28: Stack => [Jack, Queen, King, Ace]\par
\par
Stack.pop() => Ace\par
Current Stack => [Jack, Queen, King]\par
\par
Stack.peek() => King\par
Current Stack => [Jack, Queen, King]\par
\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 11:28: Stack => [Jack, Queen, King, Ace]\par
\par
Stack.pop() => Ace\par
Current Stack => [Jack, Queen, King]\par
\par
Stack.peek() => King\par
Current Stack => [Jack, Queen, King]\par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 11:28: Stack => [Jack, Queen, King, Ace]\par
\par
Stack.pop() => Ace\par
Current Stack => [Jack, Queen, King]\par
\par
Stack.peek() => King\par
Current Stack => [Jack, Queen, King]\par
\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 11:28: Stack => [Jack, Queen, King, Ace]\par
\par
Stack.pop() => Ace\par
Current Stack => [Jack, Queen, King]\par
\par
Stack.peek() => King\par
Current Stack => [Jack, Queen, King]\par
\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 11:29: Stack => [Jack, Queen, King, Ace]\par
\par
Stack.pop() => Ace\par
Current Stack => [Jack, Queen, King]\par
\par
Stack.peek() => King\par
Current Stack => [Jack, Queen, King]\par
\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 11:29: Stack => [Jack, Queen, King, Ace]\par
\par
Stack.pop() => Ace\par
Current Stack => [Jack, Queen, King]\par
\par
Stack.peek() => King\par
Current Stack => [Jack, Queen, King]\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 11:29: Stack => [Jack, Queen, King, Ace]\par
\par
Stack.pop() => Ace\par
Current Stack => [Jack, Queen, King]\par
\par
Stack.peek() => King\par
Current Stack => [Jack, Queen, King]\par
\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 11:29: Stack => [Jack, Queen, King, Ace]\par
\par
Stack.pop() => Ace\par
Current Stack => [Jack, Queen, King]\par
\par
Stack.peek() => King\par
Current Stack => [Jack, Queen, King]\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 11:29: Stack => [Jack, Queen, King, Ace]\par
\par
Stack.pop() => Ace\par
Current Stack => [Jack, Queen, King]\par
\par
Stack.peek() => King\par
Current Stack => [Jack, Queen, King]\cf2\par
\cf3\b Sumukh G (to Everyone)\b0 : \cf1 11:29: Stack => [Jack, Queen, King, Ace]\par
\par
Stack.pop() => Ace\par
Current Stack => [Jack, Queen, King]\par
\par
Stack.peek() => King\par
Current Stack => [Jack, Queen, King]\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:36: google String functions\par
\par
String str=\ldblquote import java.util.*;  \par
class JavaExample\{  \par
  public static void main(String args[])\{  \par
     ArrayList<String> alist=new ArrayList<String>();  \par
     alist.add(\\"Gregor Clegane\\");  \par
     alist.add("Khal Drogo");  \par
    //iterating ArrayList\par
     for(String str:alist)  \par
        System.out.println(str);  \par
     \}  \par
\}\rdblquote\par
\par
Scan the str, and prepare six stack for the brackets\par
Create stacks for \{, \}, (, ), [, ]\par
Compare the size of the stacks bracket pair-wise.\par
If they do not match: display an error message: Brackets do not match else say: Compiled successfully.\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 12:11: import java.util.*;\par
public class SetDemo \{\par
public static void main(String args[]) \{\par
int count[] = \{34, 22,10,60,30,22\};\par
Set<Integer> set = new HashSet<Integer>();\par
try\{\par
for(int i = 0; i<5; i++)\{\par
set.add(count[i]);\tab\}\par
System.out.println(set);\par
TreeSet sortedSet = new TreeSet<Integer>(set);\par
System.out.println("The sorted list is:");\par
System.out.println(sortedSet);\par
System.out.println("The First element of the set is: "+(Integer)sortedSet.first());\par
System.out.println("The last element of the set is: "+(Integer)sortedSet.last());\par
\}\tab catch(Exception e)\{\}\tab\}\par
\}\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 12:12: [34, 22, 10, 60, 30]\par
The sorted list is:\par
[10, 22, 30, 34, 60]\par
The First element of the set is: 10\par
The last element of the set is: 60\par
\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 12:12: [34, 22, 10, 60, 30]\par
The sorted list is:\par
[10, 22, 30, 34, 60]\par
The First element of the set is: 10\par
The last element of the set is: 60\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 12:12: [34, 22, 10, 60, 30]\par
The sorted list is:\par
[10, 22, 30, 34, 60]\par
The First element of the set is: 10\par
The last element of the set is: 60\par
\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 12:12: [34, 22, 10, 60, 30]\par
The sorted list is:\par
[10, 22, 30, 34, 60]\par
The First element of the set is: 10\par
The last element of the set is: 60\cf2\par
\cf3\b MAYANK KUMAR (to Everyone)\b0 : \cf1 12:12: [34, 22, 10, 60, 30]\par
The sorted list is:\par
[10, 22, 30, 34, 60]\par
The First element of the set is: 10\par
The last element of the set is: 60\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 12:12: import java.util.*;\par
public class SetDemo \{\par
public static void main(String args[]) \{\par
int count[] = \{34, 22,10,60,30,22\};\par
Set<Integer> set = new HashSet<Integer>();\par
try\{\par
for(int i = 0; i<5; i++)\{\par
set.add(count[i]); \}\par
System.out.println(set);\par
TreeSet sortedSet = new TreeSet<Integer>(set);\par
System.out.println("The sorted list is:");\par
System.out.println(sortedSet);\par
System.out.println("The First element of the set is: "+(Integer)sortedSet.first());\par
System.out.println("The last element of the set is: "+(Integer)sortedSet.last());\par
\} catch(Exception e)\{\} \}\par
\}\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 12:12: [34, 22, 10, 60, 30]\par
The sorted list is:\par
[10, 22, 30, 34, 60]\par
The First element of the set is: 10\par
The last element of the set is: 60\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 12:12: [34, 22, 10, 60, 30]\par
The sorted list is:\par
[10, 22, 30, 34, 60]\par
The First element of the set is: 10\par
The last element of the set is: 60\par
\cf2\par
\cf3\b Challa Bhavya (to Everyone)\b0 : \cf1 12:13: [34, 22, 10, 60, 30]\par
The sorted list is:\par
[10, 22, 30, 34, 60]\par
The First element of the set is: 10\par
The last element of the set is: 60\par
\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 12:13: [34, 22, 10, 60, 30]\par
The sorted list is:\par
[10, 22, 30, 34, 60]\par
The First element of the set is: 10\par
The last element of the set is: 60\par
\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 12:13: [34, 22, 10, 60, 30]\par
The sorted list is:\par
[10, 22, 30, 34, 60]\par
The First element of the set is: 10\par
The last element of the set is: 60\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 12:13: [34, 22, 10, 60, 30]\par
The sorted list is:\par
[10, 22, 30, 34, 60]\par
The First element of the set is: 10\par
The last element of the set is: 60\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 12:13: [34, 22, 10, 60, 30]\par
The sorted list is:\par
[10, 22, 30, 34, 60]\par
The First element of the set is: 10\par
The last element of the set is: 60\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 12:13: import java.util.*;\par
public class SetDemo \{\par
public static void main(String args[]) \{\par
int count[] = \{34, 22,10,60,30,22\};\par
Set<Integer> set = new HashSet<Integer>();\par
try\{\par
for(int i = 0; i<5; i++)\{\par
set.add(count[i]); \}\par
System.out.println(set);\par
TreeSet sortedSet = new TreeSet<Integer>(set);\par
System.out.println("The sorted list is:");\par
System.out.println(sortedSet);\par
System.out.println("The First element of the set is: "+(Integer)sortedSet.first());\par
System.out.println("The last element of the set is: "+(Integer)sortedSet.last());\par
\} catch(Exception e)\{\} \}\par
\}\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 12:13: [34, 22, 10, 60, 30]\par
The sorted list is:\par
[10, 22, 30, 34, 60]\par
The First element of the set is: 10\par
The last element of the set is: 60\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 12:13: [34, 22, 10, 60, 30]\par
The sorted list is:\par
[10, 22, 30, 34, 60]\par
The First element of the set is: 10\par
The last element of the set is: 60\par
\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 12:13: [34, 22, 10, 60, 30]\par
The sorted list is:\par
[10, 22, 30, 34, 60]\par
The First element of the set is: 10\par
The last element of the set is: 60\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 12:13: [34, 22, 10, 60, 30]\par
The sorted list is:\par
[10, 22, 30, 34, 60]\par
The First element of the set is: 10\par
The last element of the set is: 60\par
\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 12:13: [34, 22, 10, 60, 30]\par
The sorted list is:\par
[10, 22, 30, 34, 60]\par
The First element of the set is: 10\par
The last element of the set is: 60\par
\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 12:13: [34, 22, 10, 60, 30]\par
The sorted list is:\par
[10, 22, 30, 34, 60]\par
The First element of the set is: 10\par
The last element of the set is: 60\par
\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 12:13: [34, 22, 10, 60, 30]\par
The sorted list is:\par
[10, 22, 30, 34, 60]\par
The First element of the set is: 10\par
The last element of the set is: 60\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 12:13: [34, 22, 10, 60, 30]\par
The sorted list is:\par
[10, 22, 30, 34, 60]\par
The First element of the set is: 10\par
The last element of the set is: 60\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 12:13: import java.util.*;\par
 class TreeSetDemo  \{\par
    public static void main (String[] args)      \{\par
        TreeSet<String> ts1= new TreeSet<String>();\par
         // Elements are added using add() method\par
        ts1.add("A");\par
        ts1.add("C");\par
        ts1.add("B");\par
         // Duplicates will not get insert\par
        ts1.add("C");\par
         // Elements get stored in default natural\par
        // Sorting Order(Ascending)\par
        System.out.println(ts1); \par
    \}\par
\}\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 12:14: [A, B, C]\par
\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 12:14: [A, B, C]\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 12:14: [A, B, C]\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 12:14: [ A,B,C]\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 12:14: [A, B, C]\par
\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 12:14: [A, B, C]\par
\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 12:14: [A, B, C]\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 12:14: [34, 22, 10, 60, 30]\par
The sorted list is:\par
[10, 22, 30, 34, 60]\par
The First element of the set is: 10\par
The last element of the set is: 60\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 12:14: [A, B, C]\par
\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 12:14: [A, B, C]\par
\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 12:14: [A, B, C]\par
\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 12:14: [A, B, C]\par
\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 12:14: [A, B, C]\par
\cf2\par
\cf3\b MAYANK KUMAR (to Everyone)\b0 : \cf1 12:14: [A, B, C]\par
\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 12:14: [A, B, C]\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 12:14: [A, B, C]\par
\cf2\par
\cf3\b Challa Bhavya (to Everyone)\b0 : \cf1 12:14: [A, B, C]\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 12:15: [A, B, C]\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 12:15: [ A,B,C]\par
\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 12:15: [A, B, C]\par
\cf2\par
\cf3\b Nagareddy Deepthi (to Everyone)\b0 : \cf1 12:15: [A, B, C]\cf2\par
\cf3\b Harshit Mimani (to Everyone)\b0 : \cf1 12:15: [A, B, C]\par
\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 12:15: [A, B, C]\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 12:15: import java.util.*;\par
\par
class MainClass \{\par
\tab public static void main(String args[]) \{\par
\tab\tab // Creating HashSet and adding elements\par
\tab\tab LinkedHashSet<String> set = new LinkedHashSet<>();\par
\tab\tab set.add("One");\par
\tab\tab set.add("Two");\par
\tab\tab set.add("Three");\par
\tab\tab set.add("Four");\par
\tab\tab set.add("Five");\par
\tab\tab Iterator<String> i = set.iterator();\par
\tab\tab while (i.hasNext()) \{\par
\tab\tab\tab System.out.println(i.next());\par
\tab\tab\}\par
\tab\tab TreeSet<String> t = new TreeSet<>(set);\par
\tab\tab System.out.println("Sorted in alphabetical order: ");\par
\tab\tab System.out.println(t);\par
\tab\}\par
\}\par
\cf2\par
\cf3\b shivendra gupta (to Everyone)\b0 : \cf1 12:16: One\par
Two\par
Three\par
Four\par
Five\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\par
\cf2\par
\cf3\b Naveen Kumar Mittal (to Everyone)\b0 : \cf1 12:16: One\par
Two\par
Three\par
Four\par
Five\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\par
\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 12:16: One\par
Two\par
Three\par
Four\par
Five\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 12:17: One\par
Two\par
Three\par
Four\par
Five\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 12:17: One\par
Two\par
Three\par
Four\par
Five\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b Abhishek Rana (to Everyone)\b0 : \cf1 12:17: One\par
Two\par
Three\par
Four\par
Five\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 12:17: One\par
Two\par
Three\par
Four\par
Five\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 12:17: One\par
Two\par
Three\par
Four\par
Five\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\par
\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 12:17: One\par
Two\par
Three\par
Four\par
Five\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\par
\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 12:17: One\par
Two\par
Three\par
Four\par
Five\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\par
\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 12:17: One\par
Two\par
Three\par
Four\par
Five\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b Challa Bhavya (to Everyone)\b0 : \cf1 12:17: One\par
Two\par
Three\par
Four\par
Five\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\par
\cf2\par
\cf3\b Nagareddy Deepthi (to Everyone)\b0 : \cf1 12:17: One\par
Two\par
Three\par
Four\par
Five\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 12:17: One\par
Two\par
Three\par
Four\par
Five\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\par
\cf2\par
\cf3\b Syed Ali Abbas (to Everyone)\b0 : \cf1 12:17: One\par
Two\par
Three\par
Four\par
Five\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 12:17: One\par
Two\par
Three\par
Four\par
Five\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\par
\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 12:17: One\par
Two\par
Three\par
Four\par
Five\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 12:17: One\par
Two\par
Three\par
Four\par
Five\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 12:18: One\par
Two\par
Three\par
Four\par
Five\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 12:18: One\par
Two\par
Three\par
Four\par
Five\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 12:20: import java.util.*;\par
\par
class MainClass \{\par
\tab public static void main(String args[]) \{\par
\tab\tab // Creating HashSet and adding elements\par
\tab\tab HashSet<String> set = new HashSet<>();\par
\tab\tab set.add("One");\par
\tab\tab set.add("Two");\par
\tab\tab set.add("Three");\par
\tab\tab set.add("Four");\par
\tab\tab set.add("Five");\par
\tab\tab Iterator<String> i = set.iterator();\par
\tab\tab while (i.hasNext()) \{\par
\tab\tab\tab System.out.println(i.next());\par
\tab\tab\}\par
\tab\tab TreeSet<String> t = new TreeSet<>(set);\par
\tab\tab System.out.println("Sorted in alphabetical order: ");\par
\tab\tab System.out.println(t);\par
\tab\}\par
\}\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 12:23: import java.util.*;\par
\par
class MainClass \{\par
\tab public static void main(String args[]) \{\par
\tab\tab // Creating HashSet and adding elements\par
\tab\tab LinkedHashSet<String> set = new LinkedHashSet<>();\par
\tab\tab set.add("One");\par
\tab\tab set.add("Two");\par
\tab\tab set.add("Three");\par
\tab\tab set.add("Four");\par
\tab\tab set.add("Five");\par
\tab\tab set.add("Five");\par
\tab\tab System.out.println("Sorted in entry (insertion) order: ");\par
\tab\tab System.out.println(set);\par
\tab\tab HashSet<String> h = new HashSet<>(set);\par
\tab\tab System.out.println("Set in Random order: ");\par
\tab\tab System.out.println(h);\par
\tab\tab TreeSet<String> t = new TreeSet<>(set);\par
\tab\tab System.out.println("Sorted in alphabetical order: ");\par
\tab\tab System.out.println(t);\par
\tab\}\par
\}\par
\cf2\par
\cf3\b Piyush Shukla (to Everyone)\b0 : \cf1 12:24: Sorted in entry (insertion) order: \par
[One, Two, Three, Four, Five]\par
Set in Random order: \par
[Five, One, Four, Two, Three]\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\par
\cf2\par
\cf3\b Atul Gupta (to Everyone)\b0 : \cf1 12:24: Sorted in entry (insertion) order: \par
[One, Two, Three, Four, Five]\par
Set in Random order: \par
[Five, One, Four, Two, Three]\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b Vijeta Vinod Savant (to Everyone)\b0 : \cf1 12:24: Sorted in entry (insertion) order: \par
[One, Two, Three, Four, Five]\par
Set in Random order: \par
[Five, One, Four, Two, Three]\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b Harthik Ps (to Everyone)\b0 : \cf1 12:24: Sorted in entry (insertion) order: \par
[One, Two, Three, Four, Five]\par
Set in Random order: \par
[Five, One, Four, Two, Three]\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\par
\cf2\par
\cf3\b AMAN SAXENA (to Everyone)\b0 : \cf1 12:25: Sorted in entry (insertion) order: \par
[One, Two, Three, Four, Five]\par
Set in Random order: \par
[Five, One, Four, Two, Three]\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\par
\cf2\par
\cf3\b Ravi Pratap (to Everyone)\b0 : \cf1 12:25: Sorted in entry (insertion) order: \par
[One, Two, Three, Four, Five]\par
Set in Random order: \par
[Five, One, Four, Two, Three]\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\par
\cf2\par
\cf3\b Shikhar Shukla (to Everyone)\b0 : \cf1 12:25: Sorted in entry (insertion) order: \par
[One, Two, Three, Four, Five]\par
Set in Random order: \par
[Five, One, Four, Two, Three]\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b Shipra Yadav (to Everyone)\b0 : \cf1 12:25: Sorted in entry (insertion) order: \par
[One, Two, Three, Four, Five]\par
Set in Random order: \par
[Five, One, Four, Two, Three]\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b Saumya Vishwakarma (to Everyone)\b0 : \cf1 12:25: Sorted in entry (insertion) order: \par
[One, Two, Three, Four, Five]\par
Set in Random order: \par
[Five, One, Four, Two, Three]\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\par
\cf2\par
\cf3\b yashas anand (to Everyone)\b0 : \cf1 12:25: Sorted in entry (insertion) order: \par
[One, Two, Three, Four, Five]\par
Set in Random order: \par
[Five, One, Four, Two, Three]\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b Deep Shikhar Singh (to Everyone)\b0 : \cf1 12:25: Sorted in entry (insertion) order: \par
[One, Two, Three, Four, Five]\par
Set in Random order: \par
[Five, One, Four, Two, Three]\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b Shivaksh Ahalawat (to Everyone)\b0 : \cf1 12:25: Sorted in entry (insertion) order: \par
[One, Two, Three, Four, Five]\par
Set in Random order: \par
[Five, One, Four, Two, Three]\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 12:25: Sorted in entry (insertion) order: \par
[One, Two, Three, Four, Five]\par
Set in Random order: \par
[Five, One, Four, Two, Three]\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b  K Prasanna Kumar (to Everyone)\b0 : \cf1 12:25: Sorted in entry (insertion) order: \par
[One, Two, Three, Four, Five]\par
Set in Random order: \par
[Five, One, Four, Two, Three]\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b MAYANK KUMAR (to Everyone)\b0 : \cf1 12:25: Sorted in entry (insertion) order: \par
[One, Two, Three, Four, Five]\par
Set in Random order: \par
[Five, One, Four, Two, Three]\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\par
\cf2\par
\cf3\b Nagareddy Deepthi (to Everyone)\b0 : \cf1 12:26: Sorted in entry (insertion) order: \par
[One, Two, Three, Four, Five]\par
Set in Random order: \par
[Five, One, Four, Two, Three]\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b Sumukh G (to Everyone)\b0 : \cf1 12:26: Sorted in entry (insertion) order: \par
[One, Two, Three, Four, Five]\par
Set in Random order: \par
[Five, One, Four, Two, Three]\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\cf2\par
\cf3\b Abhishek Kaushik (to Everyone)\b0 : \cf1 12:26: Sorted in entry (insertion) order: \par
[One, Two, Three, Four, Five]\par
Set in Random order: \par
[Five, One, Four, Two, Three]\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\par
\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 12:28: Sorted in entry (insertion) order: \par
[One, Two, Three, Four, Five]\par
Set in Random order: \par
[Five, One, Four, Two, Three]\par
Sorted in alphabetical order: \par
[Five, Four, One, Three, Two]\par
\cf0\par
}
 