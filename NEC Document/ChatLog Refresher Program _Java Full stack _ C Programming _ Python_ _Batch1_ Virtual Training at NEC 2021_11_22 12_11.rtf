{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fswiss\fcharset0 Segoe UI;}}
{\colortbl ;\red0\green0\blue0;\red255\green255\blue255;\red59\green182\blue60;}
\viewkind4\uc1\pard\cf1\b\f0\fs24 Chat Log   C:\\Users\\acer\\Documents\\ChatLog Refresher Program _Java Full stack _ C Programming _ Python_ _Batch1_ Virtual Training at NEC 2021_11_22 12_11.rtf\b0\par
\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 08:59: Good Morning Ma'am.\cf2\par
\cf3\b Aman Saxena (to Everyone)\b0 : \cf1 09:00: Good Morning Ma'am\par
\cf2\par
\cf3\b Aman Saxena (to Everyone)\b0 : \cf1 09:02: Aman Saxena\cf2\par
\cf3\b Aman Saxena (to Everyone)\b0 : \cf1 09:02: 25\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 09:04: present ma'am\cf2\par
\cf3\b Unnati Gupta (to Everyone)\b0 : \cf1 09:04: Good morning mam \cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 09:04: good morning ma'am\cf2\par
\cf3\b Unnati Gupta (to Everyone)\b0 : \cf1 09:05: Mam unnati present \cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 09:08: Maam Kushagra present\cf2\par
\cf3\b Mohd Atyab (to Everyone)\b0 : \cf1 09:10: Mam Atyab from batch 2\cf2\par
\cf3\b Mohd Atyab (to Everyone)\b0 : \cf1 09:14: Yes mam take it tomorrow\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:16: # Python program to demonstrate sets\par
# Same as \{"a", "b", "c"\}\par
myset = set(["a", "b", "c"])\par
print(myset)\par
\par
# Adding element to the set\par
myset.add("d")\par
print(myset)\par
# This method will remove\par
# all the elements of the set\par
myset.clear()\par
  \par
print("\\nSet after using clear() function")\par
print(myset)\par
\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 09:17: \{'b', 'c', 'a'\}\par
\{'b', 'c', 'a', 'd'\}\par
\par
Set after using clear() function\par
set()\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 09:17: \{'b', 'c', 'a'\}\par
\{'d', 'b', 'c', 'a'\}\par
\par
Set after using clear() function\par
set()\par
\cf2\par
\cf3\b Aman Saxena (to Everyone)\b0 : \cf1 09:18: \{'b', 'c', 'a'\}\par
\{'c', 'a', 'b', 'd'\}\par
\par
Set after using clear() function\par
set()\par
\cf2\par
\cf3\b Mohd Atyab (to Everyone)\b0 : \cf1 09:18: \{'b', 'c', 'a'\}\par
\{'c', 'a', 'b', 'd'\}\par
\par
Set after using clear() function\par
set()\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:19: # Python program to demonstrate differences\par
# between normal and frozen set\par
\par
# Same as \{"a", "b","c"\}\par
normal_set = set(["a", "b","c"])\par
\par
print("Normal Set")\par
print(normal_set)\par
\par
# A frozen set\par
frozen_set = frozenset(["e", "f", "g"])\par
\par
print("\\nFrozen Set")\par
print(frozen_set)\par
\par
# Uncommenting below line would cause error as\par
# we are trying to add element to a frozen set\par
# frozen_set.add("h")\par
\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 09:20: Normal Set\par
\{'b', 'a', 'c'\}\par
\par
Frozen Set\par
frozenset(\{'g', 'e', 'f'\})\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 09:20: Normal Set\par
\{'c', 'b', 'a'\}\par
\par
Frozen Set\par
frozenset(\{'f', 'g', 'e'\})\par
\cf2\par
\cf3\b Aman Saxena (to Everyone)\b0 : \cf1 09:21: Normal Set\par
\{'b', 'a', 'c'\}\par
\par
Frozen Set\par
frozenset(\{'f', 'g', 'e'\})\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 09:21: Traceback (most recent call last):\par
  File "C:/Users/mk/AppData/Local/Programs/Python/Python310/example nec/set2.py", line 34, in <module>\par
    frozen_set.add("h")\par
AttributeError: 'frozenset' object has no attribute 'add'\par
\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 09:22: ========================= RESTART: C:/Users/Unnati/Documents/Python NEC/k.py =========================\par
Normal Set\par
\{'b', 'a', 'c'\}\par
\par
Frozen Set\par
frozenset(\{'f', 'e', 'g'\})\par
Traceback (most recent call last):\par
  File "C:/Users/Unnati/Documents/Python NEC/k.py", line 18, in <module>\par
    frozen_set.add("h")\par
AttributeError: 'frozenset' object has no attribute 'add'\par
>>> \cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:22: Dictionary = \{"Name":"John", "Country":"USA", "ID":101\}     \par
print(type(Dictionary))    \par
Frozenset = frozenset(Dictionary); #Frozenset will contain the keys of the dictionary    \par
print(type(Frozenset))    \par
for i in Frozenset:     \par
    print(i)    \par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 09:23: <class 'dict'>\par
<class 'frozenset'>\par
Name\par
ID\par
Country\par
\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 09:23: <class 'dict'>\par
<class 'frozenset'>\par
Country\par
Name\par
ID\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 09:23: <class 'dict'>\par
<class 'frozenset'>\par
ID\par
Name\par
Country\cf2\par
\cf3\b Mohd Atyab (to Everyone)\b0 : \cf1 09:24: Yes mam\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 09:25: intersection gives common element\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 09:26: differenece gives us element those present only in first set\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 09:26: difference is provided uncommon first set element\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 09:31: yess mam I have a doubt related to it\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 09:33: okk mam\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 09:37: Is there an interview or any kind of exam after refresher training?\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 09:38: okay ma'am\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 09:40: Write a Python program to create a shallow copy of sets.\par
Note : Shallow copy is a bit-wise copy of an object. A new object is created that has an exact copy of the values in the original object.\par
Write a Python program to find maximum and the minimum value in a set.\par
Write a Python program to remove the intersection of a 2nd set from the 1st set.\par
\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 09:49: import copy\par
  \par
# initializing list 1 \par
li1 = [1, 2, [3,5], 4]\par
  \par
  \par
# using copy for shallow copy  \par
li2 = copy.copy(li1) \par
  \par
# using deepcopy for deepcopy  \par
li3 = copy.deepcopy(li1) \cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 09:49: set1 = \{5, 10, 3, 15, 2, 20\}\par
print("Original set elements:")\par
print(set1)\par
\par
print("\\nMaximum value of the said set:")\par
print(max(set1))\par
print("\\nMinimum value of the said set:")\par
print(min(set1))\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 09:49: set1 = \{1,2,3,4,5\}\par
set2 = \{4,5,6,7,8\}\par
\par
set1-=set2\par
print("set1: ",set1)\par
print("set2: ",set2)\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 09:51: set=set(map(int,input("Enter the elements:").split()))\par
print("Maximum element=",max(set),"Minimum element=",min(set))\par
\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 09:58: import copy\par
\par
# initializing list 1\par
l1=[3,5,7]\par
li1 = [1, 2, l1, 4]\par
print(li1)\par
\par
# using copy for shallow copy\par
li2 = copy.copy(li1)\par
\par
print("After shallow copy")\par
print("list li1: ", li1)\par
print("list li2: ", li2)\par
l1.append(9)\par
print("After Append in l1, lists:")\par
print("list li1: ", li1)\par
print("list li2: ", li2)\par
li1.append(13)\par
print("After Append in li1, lists:")\par
print("list li1: ", li1)\par
print("list li2: ", li2)\par
\par
# using deepcopy for deepcopy\par
li3 = copy.deepcopy(li1)\par
print("After deep copy")\par
print("list li1: ", li1)\par
print("list li2: ", li3)\par
l1.append(11)\par
print("After Append in l1, lists:")\par
print("list li1: ", li1)\par
print("list li2: ", li3)\par
li1.append(15)\par
print("After Append in li1, lists:")\par
print("list li1: ", li1)\par
print("list li2: ", li3)      \cf2\par
\cf3\b Mohit Rai (to Everyone)\b0 : \cf1 10:07: [1, 2, [3, 5, 7], 4]\par
After shallow copy\par
list li1:  [1, 2, [3, 5, 7], 4]\par
list li2:  [1, 2, [3, 5, 7], 4]\par
After Append in l1, lists:\par
list li1:  [1, 2, [3, 5, 7, 9], 4]\par
list li2:  [1, 2, [3, 5, 7, 9], 4]\par
After Append in li1, lists:\par
list li1:  [1, 2, [3, 5, 7, 9], 4, 13]\par
list li2:  [1, 2, [3, 5, 7, 9], 4]\par
After deep copy\par
list li1:  [1, 2, [3, 5, 7, 9], 4, 13]\par
list li2:  [1, 2, [3, 5, 7, 9], 4, 13]\par
After Append in l1, lists:\par
list li1:  [1, 2, [3, 5, 7, 9, 11], 4, 13]\par
list li2:  [1, 2, [3, 5, 7, 9], 4, 13]\par
After Append in li1, lists:\par
list li1:  [1, 2, [3, 5, 7, 9, 11], 4, 13, 15]\par
list li2:  [1, 2, [3, 5, 7, 9], 4, 13]\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:09: import dis \par
\par
def sum(): \par
vara = 10 \par
varb = 20 \par
sum = vara + varb \par
print("vara + varb = %d" % sum) \par
# Call dis function for the function. \par
dis.dis(sum)\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 10:09:   4           0 LOAD_CONST               1 (10)\par
              2 STORE_FAST               0 (vara)\par
\par
  5           4 LOAD_CONST               2 (20)\par
              6 STORE_FAST               1 (varb)\par
\par
  6           8 LOAD_FAST                0 (vara)\par
             10 LOAD_FAST                1 (varb)\par
             12 BINARY_ADD\par
             14 STORE_FAST               2 (sum)\par
\par
  7          16 LOAD_GLOBAL              0 (print)\par
             18 LOAD_CONST               3 ('vara + varb = %d')\par
             20 LOAD_FAST                2 (sum)\par
             22 BINARY_MODULO\par
             24 CALL_FUNCTION            1\par
             26 POP_TOP\par
             28 LOAD_CONST               0 (None)\par
             30 RETURN_VALUE\par
\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 10:10:   4           0 LOAD_CONST               1 (10)\par
              2 STORE_FAST               0 (vara)\par
\par
  5           4 LOAD_CONST               2 (20)\par
              6 STORE_FAST               1 (varb)\par
\par
  6           8 LOAD_FAST                0 (vara)\par
             10 LOAD_FAST                1 (varb)\par
             12 BINARY_ADD\par
             14 STORE_FAST               2 (sum)\par
\par
  7          16 LOAD_GLOBAL              0 (print)\par
             18 LOAD_CONST               3 ('vara + varb = %d')\par
             20 LOAD_FAST                2 (sum)\par
             22 BINARY_MODULO\par
             24 CALL_FUNCTION            1\par
             26 POP_TOP\par
             28 LOAD_CONST               0 (None)\par
             30 RETURN_VALUE\par
>>> \cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 10:11: 4           0 LOAD_CONST               1 (10)\par
              2 STORE_FAST               0 (vara)\par
\par
  5           4 LOAD_CONST               2 (20)\par
              6 STORE_FAST               1 (varb)\par
\par
  6           8 LOAD_FAST                0 (vara)\par
             10 LOAD_FAST                1 (varb)\par
             12 BINARY_ADD\par
             14 STORE_FAST               2 (sum)\par
\par
  7          16 LOAD_GLOBAL              0 (print)\par
             18 LOAD_CONST               3 ('vara + varb = %d')\par
             20 LOAD_FAST                2 (sum)\par
             22 BINARY_MODULO\par
             24 CALL_FUNCTION            1\par
             26 POP_TOP\par
             28 LOAD_CONST               0 (None)\par
             30 RETURN_VALUE\par
\cf2\par
\cf3\b Mohd Atyab (to Everyone)\b0 : \cf1 10:12: 4           0 LOAD_CONST               1 (10)\par
              2 STORE_FAST               0 (vara)\par
\par
  5           4 LOAD_CONST               2 (20)\par
              6 STORE_FAST               1 (varb)\par
\par
  6           8 LOAD_FAST                0 (vara)\par
             10 LOAD_FAST                1 (varb)\par
             12 BINARY_ADD\par
             14 STORE_FAST               2 (sum)\par
\par
  7          16 LOAD_GLOBAL              0 (print)\par
             18 LOAD_CONST               3 ('vara + varb = %d')\par
             20 LOAD_FAST                2 (sum)\par
             22 BINARY_MODULO\par
             24 CALL_FUNCTION            1\par
             26 POP_TOP\par
             28 LOAD_CONST               0 (None)\par
             30 RETURN_VALUE\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:15: sum.py\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:15: vara = 10 \par
varb = 20 \par
sum = vara + varb \par
print "vara + varb = %d" % sum\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:16: import cProfile \par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:16: import re \par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:16: cProfile.run('re.compile("sum.py")')\par
\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 10:18: mam how to use cProfile command in pycharm\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 10:18:         1    0.000    0.000    0.000    0.000 \{method 'disable' of '_lsprof.Profiler' objects\}\par
        2    0.000    0.000    0.000    0.000 \{method 'extend' of 'list' objects\}\par
        1    0.000    0.000    0.000    0.000 \{method 'items' of 'dict' objects\}\par
\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 10:21: please tell me again\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:26: abc.py\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:27: li=[1,2,3]\par
for i in li:\par
    print(i)\par
\par
print(li)\par
for i in li:\par
   print(i)\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:28: import tabnanny\par
tabnanny.check(\lquote abc.py\rquote ) \par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:28: tabnanny.check('abc.py')\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 10:30: SyntaxError: invalid character in identifier\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:32: tabnanny.check('abc.py')\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 10:33: 'test.py': Token Error: ('EOF in multi-line statement', (8, 0))\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 10:34: li=[10,20,30,40,50]\par
for i in li:\par
    print(li)\par
\par
print(li)\par
for i in li:\par
   print(i\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:34: li=[1,2,3]\par
for i in li:\par
    print(i)\par
\par
 print(li)\par
for i in li:\par
  print(i)\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 10:35: tabnanny.check("abc.py")\par
\par
'abc.py': Indentation Error: unindent does not match any outer indentation level (<tokenize>, line 5)\par
\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 10:36: ma'am what is the use of tabnany if the same can be done with the help of interpretor\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 10:37: ok ma'am\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 10:38: Prepare a package for Library management system which contains three sub-packages as Admin, Librarian, and Student. The sub-packages contain the python modules.\par
Show the usage of the package through an application.\par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 10:53: okay ma'am\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:02: from .Admin.add import add\par
from .Librarion.detials import detials\par
from .Student.checks import checks\par
in main __init__.py\par
from add import add\par
in admin __init__.py\par
from check import check \par
\par
def add:\par
\~\~\~ print("This is admin")\par
def checks:\par
\~\~\~ print("This is student check")\par
def details:\par
\~\~\~ print("This is librarian details")\par
\par
import LMS\par
print(LMS.Admin.add.add())\par
\par
\par
C:.\par
\cf0\u9500?\u9472?\u9472?\u9472?LMS\par
\u9474?\~\~ \u9500?\u9472?\u9472?\u9472?Admin\par
\u9474?\~\~ \u9500?\u9472?\u9472?\u9472?Librarian\par
\u9474?\~\~ \u9492?\u9472?\u9472?\u9472?Student\par
\u9492?\u9472?\u9472?\u9472?__pycache__\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:04: Tea break 20 min\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 11:25: back\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 11:25: back\cf2\par
\cf3\b Mohit Rai (to Everyone)\b0 : \cf1 11:25: back\cf2\par
\cf3\b Kushagra Gupta (to Everyone)\b0 : \cf1 11:25: Back\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 11:26: back\cf2\par
\cf3\b Mohd Atyab (to Everyone)\b0 : \cf1 11:26: Back\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:31: class Employee:    \par
    id=10   \par
    name="Jay"    \par
    def display (self):    \par
        print("ID: %d \\nName: %s"%(self.id,self.name))    \par
\par
# Creating a emp instance of Employee class  \par
emp=Employee()    \par
emp.display()    \par
\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 11:33: ID: 10 \par
Name: Jay\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 11:33: ID: 10 \par
Name: Jay\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 11:33: okay ma'am\cf2\par
\cf3\b Mohit Rai (to Everyone)\b0 : \cf1 11:33: ID: 10 \par
Name: Jay\par
\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 11:33: ID: 10 \par
Name: Jay\cf2\par
\cf3\b Mohd Atyab (to Everyone)\b0 : \cf1 11:37: Mam evening batch\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 11:43: we can join evening batch\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:44: class Student:  \par
    # Constructor - non parameterized  \par
    def __init__(self):  \par
        print("This is non parametrized constructor")  \par
    def show(self,name):  \par
        print("Hello",name)  \par
\par
student = Student()  \par
student.show("John") \par
\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 11:45: This is non parametrized constructor\par
Hello John\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 11:45: This is non parametrized constructor\par
Hello John\par
\cf2\par
\cf3\b APURV AGNIHOTRI (to Everyone)\b0 : \cf1 11:45: This is non parametrized constructor\par
Hello John\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:46: class Student:\par
        # Constructor \endash  parameterized\par
        def __init__(self, name):\par
              print("This is parametrized constructor")\par
              self.name = name\par
        def show(self):\par
              print("Hello",self.name)\par
\par
student = Student("John")\par
student.show()\par
\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 11:47: This is parametrized constructor\par
Hello John\cf2\par
\cf3\b Akshay Singh (to Everyone)\b0 : \cf1 11:47: This is parametrized constructor\par
Hello John\par
\cf2\par
\cf3\b Monica (to Everyone)\b0 : \cf1 11:48: Design a class : student, with two attributes : name and id (default value is Jay, 101)\par
Through constructor change these values to \ldblquote H. Jay\rdblquote , 102\par
Call a display func to display the objects.\par
\cf2\par
\cf3\b Unnati (to Everyone)\b0 : \cf1 11:55: class Student:\par
        # Constructor \endash  parameterized\par
       \par
        def __init__(self, name="Jay",id1="101"):\par
              \par
              self.name = name\par
              self.id1=id1\par
        def display(self):\par
              print("name:",self.name)\par
              print("id:",self.id1)\par
\par
\par
\par
st2=Student()\par
\par
st2.display()\par
print("change the value")\par
student = Student("H.Jay","102")\par
student.display()\par
\cf0\par
}
 